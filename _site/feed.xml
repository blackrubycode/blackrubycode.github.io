<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blackruby Code</title>
    <atom:link href="/blackruby-code/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://localhost:4000/blackruby-code/</link>
    <description>A website with blog posts and pages</description>
    <pubDate>Wed, 17 Jan 2018 16:55:27 +0900</pubDate>
    
      <item>
        <title>재미그래밍 - 스터디자료</title>
        <link>/blackruby-code/python/2018/01/15/study.html</link>
        <guid isPermaLink="true">/blackruby-code/python/2018/01/15/study.html</guid>
        <description>&lt;h1 id=&quot;스터디-자료-2018_01_15&quot;&gt;스터디 자료 2018_01_15&lt;/h1&gt;

&lt;h2 id=&quot;restful-파이썬-웹-서비스-제작&quot;&gt;RESTful 파이썬 웹 서비스 제작&lt;/h2&gt;

&lt;h3 id=&quot;스터디-자료&quot;&gt;스터디 자료&lt;/h3&gt;

&lt;h4 id=&quot;플라스크를-이용한-레스트풀-api-개발&quot;&gt;플라스크를 이용한 레스트풀 API 개발&lt;/h4&gt;

&lt;p&gt;간단한 리스트에서 CRUD 작업을 수행하는 레스트풀 API를 만들기 위해 다음의 과정이 필요합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;플라스크 레스트풀 확장을 사용해 플라스크에서 CRUD 연산을 수행하는 레스트풀 API 설계&lt;/li&gt;
  &lt;li&gt;각 HTTP 메서드가 수행하는 작업 이해&lt;/li&gt;
  &lt;li&gt;플라스크와 플라스크 레스트풀 확장을 사용해 가상 환경 설정하기&lt;/li&gt;
  &lt;li&gt;응답용 상태 코드 선언&lt;/li&gt;
  &lt;li&gt;자원을 나타내는 모델의 생성&lt;/li&gt;
  &lt;li&gt;딕셔너리를 저장소로 사용&lt;/li&gt;
  &lt;li&gt;직렬화된 응답에 대한 출력 필드 구성&lt;/li&gt;
  &lt;li&gt;플라스크 플러거블 뷰의 맨 위에서 풍부한 라우팅으로 작업&lt;/li&gt;
  &lt;li&gt;자원 라우팅과 엔드포인트에 대한 구성&lt;/li&gt;
  &lt;li&gt;플라스크 API에 대한 HTTP 요청 작성&lt;/li&gt;
  &lt;li&gt;플라스크 API와 대화하는 명령 행 도구에서의 작업&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;간단한-데이터-소스와-대화하는-레스트풀-api-설계&quot;&gt;간단한 데이터 소스와 대화하는 레스트풀 API 설계&lt;/h4&gt;

&lt;p&gt;IoT(사물 인터넷)장치에 유선으로 연결된 OLED 디스플레이에 나타낼 메시지를 구성해야 한다고 상상해봅시다. IoT 장치에서는 파이썬 3.5, 플라스크 및 기타 파이썬 패키지를 실행할 수 있다고 합시다. 딕셔너리에서 문자열 메시지를 얻고 이를 IoT 장치에 연결된 OLED 디스플레이에 나타내는 코드를 작성하는 팀이 있을 것입니다. 문자열 메시지로 CRUD 작업을 수행하는 레스트풀 API와 대화할 웹 사이트와 모바일 웹에 대한 작업을 시작해야합니다.&lt;/p&gt;

&lt;p&gt;먼저, 주 자원인 메시지에 대한 요구사항을 지정해야 합니다. 메시지에 대해서는 다음 속성 또는 필드가 필요합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;정수 식별자&lt;/li&gt;
  &lt;li&gt;문자열 메시지&lt;/li&gt;
  &lt;li&gt;메시지가 OLED 디스플레이에 표시돼야 하는 시간을 나타내는 초 단위의 지속 시간&lt;/li&gt;
  &lt;li&gt;생성 날짜 및 시간 - 컬렉션에 새 메시지를 추가할 때 타임 스탬프가 자동으로 추가될 것이다.&lt;/li&gt;
  &lt;li&gt;“경고”및 “정보”와 같은 메시지 카테고리 설명&lt;/li&gt;
  &lt;li&gt;메시지가 OLED 디스플레이에 표시된 시간을 나타내는 정수 카운터&lt;/li&gt;
  &lt;li&gt;메시지가 적어도 한 번 OLED 디스플레이에 표시 됐는지 나타내는 bool 값&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음 표에서는 첫 번째 API 버전에서 지원해야하는 HTTP, 동사, 범위, 의미를 보여줍니다. 각 메서드는 HTTP 동사와 범위로 구성되며 모든 메서드는 모든 메시지와 컬렉션에 대해 잘 정의된 의미를 갖습니다. API에서는 각 메시지마다 고유한 URL이 있습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;HTTP 동사&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;범위&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;의미&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;메시지 컬렉션&lt;/td&gt;
      &lt;td&gt;컬렉션 내에 저장된 모든 메시지를 얻어 이름의 오름차순으로 정렬합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;메시지&lt;/td&gt;
      &lt;td&gt;단일 메시지를 받아옵니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POST&lt;/td&gt;
      &lt;td&gt;메시지 컬렉션&lt;/td&gt;
      &lt;td&gt;컬렉션 내에 새 메시지를 생성합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PATCH&lt;/td&gt;
      &lt;td&gt;메시지&lt;/td&gt;
      &lt;td&gt;기존 메시지의 필드를 업데이트 합니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td&gt;메시지&lt;/td&gt;
      &lt;td&gt;기존 메시지를 삭제합니다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;각-http-메서드가-수행하는-작업-이해&quot;&gt;각 HTTP 메서드가 수행하는 작업 이해&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:5000/api/messages/&lt;/code&gt;가 메시지 컬렉션의 URL이라고 합시다. 이 URL에 숫자를 추가하면 지정된 숫자 값과 같은 id의 특정 메시지를 식별합니다. 예를 들어, &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:5000/api/messages/6&lt;/code&gt; id가 6인 메시지를 식별합니다.&lt;/p&gt;

&lt;h5 id=&quot;post-method&quot;&gt;POST Method&lt;/h5&gt;

&lt;p&gt;다음과 같이 POST HTTP 동사와 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:5000/api/messages/&lt;/code&gt;라는 요청 URL을 사용해서 HTTP 요청을 작성해 보내면 새 메시지를 작성할 수 있습니다. 또한 JSON 키-값 쌍에 필드 이름과 값을 제공해 새 메시지를 만들어야 합니다. 요청의 결과로 서버는 필드에 대해 제공된 값의 유효성을 검사하고 유효한 메시지인지 확인하고나서 메시지 딕셔너리에 이를 유지합니다.&lt;/p&gt;

&lt;p&gt;서버는 최근에 추가된 메시지와 함께 201 Created 상태 코드와 JSON으로 직렬화된 JSON 본문을 반환하는데, 이때 메시지 객체에는 서버가 자동으로 생성한 할당 ID가 들어갑니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST http://localhost:5000/api/messages/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;get-method&quot;&gt;GET Method&lt;/h5&gt;

&lt;p&gt;다음과 같이 GET HTTP 동사와 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:5000/api/messages/{id}&lt;/code&gt; 요청 URL을 사용해서 HTTP 요청을 작성해 보내면 id가 {id}의 자리에 지정된 숫자 값과 일치하는 메시지를 받을 수 있습니다. 예를 들어, 요청 URL인 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:5000/api/messages/82&lt;/code&gt;를 사용하면 서버는 id가 82와 일치하는 게임을 검색합니다. 이 요청의 결과로 서버는 딕셔너리에서 지정된 id를 가진 메시지를 찾을 것입니다.&lt;/p&gt;

&lt;p&gt;메시지가 발견되면 서버는 메시지 객체를 JSON으로 직렬화하고 200 OK 상태 코드와 직렬화된 메시지 객체가 들어간 JSON 본문을 반환할 것입니다. 지정된 id 또는 기본 키와 일치하는 메시지가 없으면 서버는 404 Not Found 상태를 반환합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET http://localhost:5000/api/messages/{id}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;patch-method&quot;&gt;PATCH Method&lt;/h5&gt;

&lt;p&gt;다음과 같이 PATCH HTTP 동사와 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:5000/api/messages/{id}&lt;/code&gt; 요청 URL을 사용해서 HTTP 요청을 작성해 보내면 id가 {id}의 자리에 지정된 숫자 값과 일치하는 메시지의 필드를 하나 이상 업데이트할 수 있습니다. 또한 JSON 키-값 쌍에 업데이트할 필드 이름과 새 값을 제공해야 합니다. 이 요청의 결과로 서버는 필드에 대해 제공된 값의 유효성을 검사하고 지정된 id와 일치하는 메시지에서 이 필드를 업데이트할 것이며 유효한 메시지라면 딕셔너리에 있는 해당 메시지를 업데이트합니다.&lt;/p&gt;

&lt;p&gt;서버는 200 OK 상태 코드와 최근 업데이트된 게임이 JSON으로 직렬화된 JSON 본문을 반환할 것입니다. 업데이트할 필드에 유효하지 않은 데이터를 제공하면 서버는 400 Bad Request 상태 코드를 반환합니다. 서버가 지정된 id를 가진 메시지를 찾지 못하면 서버는 404 Not Found 상태만 반환합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PATCH http://localhost:5000/api/messages/{id}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;delete-method&quot;&gt;DELETE Method&lt;/h5&gt;

&lt;p&gt;다음과 같이 DELETE HTTP 동사와 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:5000/api/messages/{id}&lt;/code&gt; 요청 URL을 사용해서 HTTP 요청을 작성해 보내면 {id}의 자리에 지정된 숫자 값과 일치하는 id의 메시지를 제거할 수 있습니다. 예를 들어, &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:5000/api/messages/15&lt;/code&gt;라는 요청 URL을 사용하면 서버는 id가 15와 일치하는 메시지를 삭제할 것입니다. 이 요청의 결과로 서버는 딕셔너리에서 지정된 id를 가진 메시지를 찾을 것입니다.&lt;/p&gt;

&lt;p&gt;메시지가 있으면 서버는 딕셔너리에게 이 메시지 객체와 관련된 항목을 삭제할 것을 요청하고 204 No Content 상태 코드를 반환합니다. 지정된 id와 일치하는 메시지가 없으면 서버는 404 Not Found 상태를 반환합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DELETE http://localhost:5000/api/messages/{id}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;플라스크와-플라스크-레스트풀-확장을-사용해-가상-환경-설정하기&quot;&gt;플라스크와 플라스크 레스트풀 확장을 사용해 가상 환경 설정하기&lt;/h4&gt;

&lt;p&gt;다음의 명령을 실행하고 가상 환경을 만듭니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 -m venv ~/PythonREST/Flask01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 나서 다음의 명령을 실행하여 가상 환경을 활성화 시켜야합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source ~/PythonREST/Flask01/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 가상환경을 만들고 활성화 시켰다면 pip를 사용해서 다음과 같이 설치해야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install flask-restful
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;응답용-상태-코드-선언&quot;&gt;응답용 상태 코드 선언&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from flask import jsonify
from app.exceptions import ValidationError
from . import api


def bad_request(message):
    response = jsonify({'error': 'bad request', 'message': message})
    response.status_code = 400
    return response


def unauthorized(message):
    response = jsonify({'error': 'unauthorized', 'message': message})
    response.status_code = 401
    return response


def forbidden(message):
    response = jsonify({'error': 'forbidden', 'message': message})
    response.status_code = 403
    return response


@api.errorhandler(ValidationError)
def validation_error(e):
    return bad_request(e.args[0])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;플라스크나 플라스크 레스트풀 모두에는 각 HTTP 상태 코드에 대한 변수 선언이 들어 있지 않습니다. 위의 예는 flasky(플라스크 기본서의 예제코드)의 HTTP 상태 코드입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;모델의-생성&quot;&gt;모델의 생성&lt;/h4&gt;

&lt;p&gt;이제, 메시지를 나타내는 데 사용할 간단한 MessageModel 클래스를 만들어야합니다. api 폴더에 새 &lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt; 파일을 생성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class MessageModel:
	def __init__(self, message, duration, creation_date, message_category):
	# We will automatically generate the new id
	self.id = 0
	self.message = message
	self.duration = duration 
	self.creation_date = creation_date
	self.message_category = message_category
	self.printed_times = 0
	self.printed_once = False
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MessageModel&lt;/code&gt;클래스는 생성자, 즉, &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__&lt;/code&gt; 메서드를 선언합니다. 이 메서드는 많은 인자를 받아 이를 사용해 message, duration, creation_date, message_category와 같은 이름의 속성을 초기화 합니다. id 속성은 0, printed_times도 0, print_once는 False로 설정됩니다. API 호출로 발생된 각 새 메시지의 식별자는 자동으로 증가할 것 입니다.&lt;/p&gt;

&lt;h4 id=&quot;딕셔너리를-저장소로-사용&quot;&gt;딕셔너리를 저장소로 사용&lt;/h4&gt;

&lt;p&gt;이제, MessageModel 인스턴스를 메모리 내장 딕셔너리에 유지하는데 사용할 MessageManager 클래스를 생성합니다. API 메서드는 MessageModel 인스턴스를 얻기, 삽입, 업데이트, 삭제하기 위해 MessageManager 클래스의 메서드를 호출합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from flask import Flask
from flask_restful import abort, Api, fields, marshal_with, reqparse, Resource
from datetime import datetime
from models import MessageModel
import status
from pytz import utc


class MessageManager():
    last_id = 0
    def __init__(self):
        self.messages = {}

    def insert_message(self, message):
        self.__class__  .last_id += 1
        message.id = self.__class__.last_id
        self.messages[self.__class__.last_id] = message

    def get_message(self, id):
        return self.messages[id]

    def delete_message(self, id):
        del self.messages[id]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MessageManager 클래스는 last_id 클래스 속성을 선언하고 0으로 초기화합니다. 이 클래스 속성은 딕셔너리에 저장된 MessageModel 인스턴스에 대해 생성돼 할당된 최근 id를 저장합니다. 생성자, 즉, &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__&lt;/code&gt;메서드는 message 속성을 생성하고 빈 딕셔너리로 초기화합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;insert_message&lt;/strong&gt;: 이 메서드는 message 인자에서 최근에 생성된 MessageModel 인스턴스를 받습니다. 이 코드는 last_id 클래스 속성의 값을 증가시키고 나서 그 결과 값을 수신된 메시지의 id에 대입합니다. 이 코드는 self.__class__를 사용해 현재 인스턴의 타입을 참조합니다. 마지막으로, message를 self.message 딕셔너리에 생성된 id인 last_id로 식별되는 키에 값으로 추가합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;get_message&lt;/strong&gt;: 이 메서드는 self.message 딕셔너리에서 검색해야 하는 메시지의 id를 수신합니다. 이 코드는 데이터 소스로 사용 중인 self.message 딕셔너리에서 수신 id와 일치하는 키와 관련된 값을 반환합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;delete_message&lt;/strong&gt;: 이 메서드는 self.message 딕셔너리에서 제거해야 하는 메시지의 id를 수신합니다. 이 코드는 데이터 소스로 사용 중인 self.message 딕셔너리에서 수신 id와 일치하는 키-값 쌍을 삭제합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;출력-필드-구성&quot;&gt;출력 필드 구성&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;message_fields = {
    'id': fields.Integer,
    'uri': fields.Url('message_endpoint'),
    'message': fields.String,
    'duration': fields.Integer,
    'creation_date': fields.DateTime,
    'message_category': fields.String,
    'printed_times': fields.Integer,
    'printed_once': fields.Boolean
}


message_manager = MessageManager()	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 flask_restful.fields 모듈에 선언된 문자열과 클래스의 키-값 쌍을 가진 message_fields 딕셔너리(dict)를 선언한 것입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;field.Integer&lt;/strong&gt;: 정수 값을 출력합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;fields.Url&lt;/strong&gt;: URL의 문자열 표현을 생성합니다. 기본적으로 이 클래스는 요청되는 자원에 대해 상대 URI를 생성합니다. 이 코드는 endpoint 인자에 ‘message_endpoint’를 지정합니다. 그러면 클래스는 지정된 엔드포인트 이름을 사용할 것입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;fields.DateTime&lt;/strong&gt;: UTC로 형식화된 datetime 문자열을 출력하는데 기본 RFC 822 형식입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;fields.Boolean&lt;/strong&gt;: bool 값의 문자열 표현을 생성합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;플라스크-플러거블-뷰의-맨-위에서-풍부한-라우팅으로-작업&quot;&gt;플라스크 플러거블 뷰의 맨 위에서 풍부한 라우팅으로 작업&lt;/h4&gt;

&lt;p&gt;플라스크 레스트풀은 플라스크 플러거블 뷰(Flask pluggable views) 위에 빌드된 자원을 레스트풀 API의 주요 구성 블록으로 사용합니다. 우리는 flask_restful.Resource 클래스의 서브 클래스를 만들어 지원되는 각 HTTP 동사의 메서드를 선언하면 됩니다. flask_restful.Resource의 서브 클래스는 레스트풀 자원을 나타내므로 메시지 컬렉션을 나타내는 클래스 하나와 메시지 자원을 나타내는 클래스를 선언해야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Message(Resource):
    def abort_if_message_doesnt_exist(self, id):
        if id not in message_manager.messages:
            abort(
                status.HTTP_404_NOT_FOUND, 
                message=&quot;Message {0} doesn't exist&quot;.format(id))

    @marshal_with(message_fields)
    def get(self, id):
        self.abort_if_message_doesnt_exist(id)
        return message_manager.get_message(id)

    def delete(self, id):
        self.abort_if_message_doesnt_exist(id)
        message_manager.delete_message(id)
        return '', status.HTTP_204_NO_CONTENT

    @marshal_with(message_fields)
    def patch(self, id):
        self.abort_if_message_doesnt_exist(id)
        message = message_manager.get_message(id)
        parser = reqparse.RequestParser()
        parser.add_argument('message', type=str)
        parser.add_argument('duration', type=int)
        parser.add_argument('printed_times', type=int)
        parser.add_argument('printed_once', type=bool)
        args = parser.parse_args()
        if 'message' in args:
            message.message = args['message']
        if 'duration' in args:
            message.duration = args['duration']
        if 'printed_times' in args:
            message.printed_times = args['printed_times']
        if 'printed_once' in args:
            message.printed_once = args['printed_once']
        return message
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;get&lt;/strong&gt;: 이 메서드는 id 인자로 얻어야 하는 메시지의 id를 수신합니다. 요청된 id를 가진 메시지가 없는 경우에는 self.abort_if_message_doesnt_exist 메서드를 호출해 중단시킵니다. 해당 메시지가 존재하는 경우에는 message_manager.get_message 메서드가 반환한 id와 일치하는 id를 갖는 MessageModel 인스턴스를 반환합니다. get 메서드는 message_fields가 인자로 들어간 @marshal_with 데커레이터를 사용합니다. 이 데커레이터는 MessageModel 인스턴스를 가져와서 message_fields에 지정된 필드 필터링 및 출력 형식을 적용합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;delete&lt;/strong&gt;: 이 메서드는 id 인자로 삭제해야 하는 메시지의 id를 받습니다. 요청된 id를 가진 메서드가 없는 경우에는 self.abort_if_message_doesnt_exist 메서드를 호출해 중단시킵니다. 해당 메시지가 존재하는 경우에는 수신된 id를 인자로해서 message_manager.delete_message 메서드를 호출해 데이터 저장소에서 MessageModel 인스턴스를 제거합니다. 그리고 나서 빈 응답 본문과 204 Not Content 상태 코드를 반환합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;patch&lt;/strong&gt;: 이 메서드는 id 인자로 업데이트하거나 패치해야 하는 메시지의 id를 받습니다. 요청 된 id의 메시지가 없는 경우에는 self.abort_if_message_doesnt_exist 메서드를 호출해 중단시킵니다. 해당 메시지가 존재하는 경우에는 message_manager.get_message 메서드가 반환한 id와 일치하는 id를 가진 MessageModel 인스턴스를 메시지 변수에 저장합니다. 그 다음 행에서는 parser라는 이름의 flask_restful.reqparse.RequestParser 인스턴스를 생성합니다. RequestParser 인스턴스를 사용하면 이름과 타입을 인자로. 추가하고 나서 요청과 함께 받은 인자를쉽게 파싱할 수 있습니다. 이 코드는 파싱할 이름과 타입을 인자로 해서 parser.add_argument를 4번 호출합니다. 그러고 나서 parser.parse_args 메서드를 호출해 요청의 모든 인자를 파싱하고 반환된 딕셔너리를 args 변수에 저장합니다. 이 코드는 MessageModel 인스턴스의 args 딕셔너리에 새 값을 갖는 모든 속성을 업데이트 합니다. 요청에 특정 필드의 값이 포함되지 않은 경우에는 realted 속성을 변경하지 않습니다. 요청에는 값으로 업데이트할 수 있는 4개의 필드가 포함될 필요가 없습니다. 이 코드는 업데이트 된 message를 반환합니다. patch 메서드는 message_fields를 인자로 가진 @marshal_with 데커레이터를 사용합니다. 이 데커레이터는 MessageModel 인스턴스인 message를 가져와서 message_fields에 지정된 필드 필터링 및 출력 형식을 적용합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이제 메시지 컬렉션을 나타내는 데 사용할 MessageList 클래스를 만들어봅시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class MessageList(Resource):
    @marshal_with(message_fields)
    def get(self):
        return [v for v in message_manager.messages.values()]

    @marshal_with(message_fields)
    def post(self):
        parser = reqparse.RequestParser()
        parser.add_argument('message', type=str, required=True, help='Message cannot be blank!')
        parser.add_argument('duration', type=int, required=True, help='Duration cannot be blank!')
        parser.add_argument('message_category', type=str, required=True, help='Message category cannot be blank!')
        args = parser.parse_args()
        message = MessageModel(
            message=args['message'],
            duration=args['duration'],
            creation_date=datetime.now(utc),
            message_category=args['message_category']
            )
        message_manager.insert_message(message) 
        return message, status.HTTP_201_CREATED
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;get&lt;/strong&gt;: 이 메서드는 message_manager.messages 딕셔너리에 저장된 모든 MessageModel 인스턴스가 있는 리스트를 반환합니다. get 메서드는 message_fields를 인자로 가진 @marshal_with 데커레이터를 사용합니다. 이 데커레이터는 반환된 리스트의 각 MessageModel 인스턴스를 가져와서 message_fields에 지정된 필드 필터링 및 출력 형식을 적용합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;post&lt;/strong&gt;: 이 메서드는 parser라는 flask_restful.reqparse.RequestParser 인스턴스를 생성합니다. RequestParser 인스턴스를 사용하면 이름과 타입을 인자로 추가하고 나서 POST 요청으로 받은 인자를 쉽게 파싱해 새 MessageModel 인스턴스를 만들 수 있습니다. 이 코드는 파싱할 3개의 인자로 이름과 타입을 넣어 parser.add_argument를 3번 호출합니다. 그러고 나서 parser.parse_args 메서드를 호출해 요청의 모든 인자를 파싱하고 반환된 딕셔너리를 args 변수에 저장합니다. 이 코드는 딕셔너리의 파싱된 인자를 사용해 message, duration, message_category 속성 값을 지정해 새 MessageModel 인스턴스를 생성하고 message 변수에 저장합니다. creation_date 인자의 값은 시간대 정보가 있는 현재 datetime으로 설정되므로 요청에서 파싱되지 않습니다. 그러고 나서 새 MessageModel 인스턴스(message)로 message_manager.insert_message 메서드를 호출해 이 새 인스턴스를 딕셔너리에 추가합니다. post 메서드는 message_fields를 인자로 가진 @marshal_with 데커레이터를 사용합니다. 이 데커레이터는 최근에 생성돼 지정된 MessageModel 인스턴스인 message를 취해 message_fields에 지정된 필드 필터링 및 출력 형식을 적용합니다. 이 코드는 HTTP 201 Created 상태 코드를 반환합니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음의 표는 HTTP 동사와 범위의 각 조합에 대해 실행할 앞서 만든 클래스의 메서드를 보여줍니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;HTTP 동사&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;범위&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;클래스와 메서드&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;메시지 컬렉션&lt;/td&gt;
      &lt;td&gt;MessageList.get&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;메시지&lt;/td&gt;
      &lt;td&gt;Message.get&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POST&lt;/td&gt;
      &lt;td&gt;메시지 컬렉션&lt;/td&gt;
      &lt;td&gt;MessageList.post&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PATCH&lt;/td&gt;
      &lt;td&gt;메시지&lt;/td&gt;
      &lt;td&gt;Message.patch&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td&gt;메시지&lt;/td&gt;
      &lt;td&gt;Message.delete&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;자원-라우팅과-엔드포인트에-대한-구성&quot;&gt;자원 라우팅과 엔드포인트에 대한 구성&lt;/h4&gt;

&lt;p&gt;적절한 메서드를 호출하고 URL 규칙을 정의해 필요한 모든 인자를 전달하기 위해서는 필요한 자원 라우팅 구성을 만들어야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app = Flask(__name__)
api = Api(app)
api.add_resource(MessageList, '/api/messages/')
api.add_resource(Message, '/api/messages/&amp;lt;int:id&amp;gt;', endpoint='message_endpoint')


if __name__ == '__main__':
    app.run(debug=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 flask_restful.Api 클래스의 인스턴스를 생성하고 이를 api 변수에 저장합니다. api.add_resource 메서드를 호출할 때마다 자원, 특히 flask_restful.Resource 클래스의 이전에 선언된 서브 클래스 중 하나로 URL 경로가 잡힙니다. API에 대한 요청이 있고 URL이 api.add_resource 메서드에 지정된 URL 중 하나와 일치하면 플라스크는 지정된 클래스에 대한 요청에서 HTTP 동사와 일치하는 메서드를 호출합니다. 이 메서드는 표준 플라스크 라우팅 규칙을 따릅니다.&lt;/p&gt;

&lt;h4 id=&quot;플라스크-api에-대한-http-요청-작성&quot;&gt;플라스크 API에 대한 HTTP 요청 작성&lt;/h4&gt;

&lt;h5 id=&quot;명령-행-도구에서의-작업---curl과-httpie&quot;&gt;명령 행 도구에서의 작업 - curl과 httpie&lt;/h5&gt;

&lt;h5 id=&quot;post&quot;&gt;POST&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -iX POST -H &quot;Content-Type: application/json&quot; -d '{&quot;message&quot;: &quot;Welcome to IoT&quot;, &quot;duration&quot;: 10, &quot;message_category&quot;: &quot;Information&quot;}' :5000/api/messages/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yoonkh/yoonkh.github.io/blob/master/assets/api.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 요청은 /api/messages/를 지정하므로 ‘/api/messages/’를 적용해 MessageList, post 메서드를 실행합니다. URL 경로에 매개 변수가 없기 때문에 이 메서드는 인자를 받지 않습니다. 요청에 대한 HTTP 동사가 POST이므로 플라스크는 post 메서드를 호출합니다. 새 MessageModel이 딕셔너리에 성공적으로 유지되면, 이 함수는 HTTP 201 Created 상태 코드와 함께 응답 본문에 JSON으로 직렬화된 최근 유지된 MessageModel을 반환합니다.&lt;/p&gt;

&lt;h5 id=&quot;get&quot;&gt;GET&lt;/h5&gt;

&lt;p&gt;이제 모든 메세지를 얻는 HTTP 요청을 작성해서 보내봅시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -iX GET -H :5000/api/messages/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/yoonkh/yoonkh.github.io/blob/master/assets/api2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;404-not-found&quot;&gt;404 Not Found&lt;/h5&gt;

&lt;p&gt;이제 존재하지 않는 메세지를 얻을 HTTP 요청을 작성해서 보내봅시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -iX GET :5000/api/messages/800
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/yoonkh/yoonkh.github.io/blob/master/assets/api4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;서버는 id 인자 값으로 800을 사용해서 Message.get 메서드를 실행합니다. 이 메서드는 인자로 받은 id값과 일치하는 id의 MessageModel 객체를 얻는 코드를 실행하게 됩니다. 하지만 지정된 id값을 가진 메시지가 없기 때문에 MessageList.get 메서드의 첫 번째 행은 딕셔너리 키에서 id를 찾지 못하는 abort_if_message_doesnt_exist 메서드를 호출하고 flask_restful.abort 함수가 실행될 것입니다. 따라서 코드는 HTTP 404 Not Found 상태 코드를 반환합니다.&lt;/p&gt;

&lt;h5 id=&quot;patch&quot;&gt;PATCH&lt;/h5&gt;

&lt;p&gt;이제 기존 메시지를 업데이트하는 HTTP 요청, 즉 두 필드의 값을 업데이트하라는 메시지를 작성해 보내봅시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -iX PATCH -H &quot;Content-Type: application/json&quot; -d '{&quot;printed_once&quot;: &quot;true&quot;, &quot;printed_times&quot;: 1}' :5000/api/messages/2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/yoonkh/yoonkh.github.io/blob/master/assets/api3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;지정된 id를 가진 MessageModel 인스턴스가 존재하고 성공적으로 업데이트된다면, 이 메서드 호출은 HTTP 200 OK 상태 코드와 함께 응답 본문 속에 JSON으로 직렬화시킨 최근 업데이트의 MessageModel 인스턴스를 반환합니다.&lt;/p&gt;

&lt;h5 id=&quot;delete&quot;&gt;DELETE&lt;/h5&gt;

&lt;p&gt;이제 기존 메시지, 특히 마지막으로 추가한 메시지를 삭제하는 HTTP 요청을 작성해봅시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -iX DELETE :5000/api/message/2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yoonkh/yoonkh.github.io/blob/master/assets/api5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 요청은 /api/messages/ 뒤에 숫자가 있으므로, ‘/api/messages/&lt;int:id&gt;'가 적용돼 Message.delete 메서드, 즉 Message 클래스의 delete 메서드를 실행합니다. 지정된 id를 가진 MessageModel 인스턴스가 존재하고 성공적으로 삭제됐다면, 이 메서드 호출은 HTTP 204 No Content 상태 코드를 반환합니다.&lt;/int:id&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 15 Jan 2018 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>fungramming - 환경구축 자동화와 서버구축</title>
        <link>/blackruby-code/web/2018/01/06/fungramming.html</link>
        <guid isPermaLink="true">/blackruby-code/web/2018/01/06/fungramming.html</guid>
        <description>&lt;h1 id=&quot;재미그래밍-스터디-자료&quot;&gt;재미그래밍 스터디 자료&lt;/h1&gt;

&lt;h2 id=&quot;웹-환경-구축-자동화&quot;&gt;웹 환경 구축 자동화&lt;/h2&gt;

&lt;h3 id=&quot;환경구축을-왜-자동화해야-할까요&quot;&gt;환경구축을 왜 자동화해야 할까요?&lt;/h3&gt;

&lt;p&gt;보통 서버는 한 번 구축하면, 이후로는 특별힐 건드릴 일이 없으니 수동으로 대처해도 충분하다고 생각할 지 모르지만, 
실제로는 새로 서버를 추가하거나 서비스 중인 환경에 새로운 라이브러리와 미들웨어를 설치하거나, 신기술을 검증하려고 개발 환경을 따로 준비해야하는 상황은 반드시 발생하기 마련입니다. 그때마다 매번 수동으로 환경을 구축한다는 것은 시간이 아무리 많아도 부족합니다. 하지만 절차를 자동화했다면 누구든 짧은 시간에 간단히 구축할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;가상화 기술 도구&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Vagrant&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Docker&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;프로비저닝 도구&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Ansible&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서버의 상태 테스트 도구&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Serverspec&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;프로비저닝이란&quot;&gt;프로비저닝이란??&lt;/h3&gt;

&lt;p&gt;프로비저닝이란, 비즈니스의 요구에 따라 시스템 자원을 자동으로 할당/회수, 재배치하여 시스템 자원을 최적화 하는 기능입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;서버자원 프로비저닝&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;서버의 CPU, Memory 등의 자원을 할당 또는 적절하게 배치해서 운영할 수 있도록 준비해 놓는 것을 &lt;strong&gt;서버자원 프로비저닝&lt;/strong&gt;이라고 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;OS 프로비저닝&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;OS를 서버에 설치하고, 구성 작업을 해서 OS가 기동되도록 준비해 놓는 것을 &lt;strong&gt;OS 프로비저닝&lt;/strong&gt;이라고 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;소프트웨어 프로비저닝&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;소프트웨어를 시스템에 설치/배포하고 필요한 구성 셋팅 작업을 해서 실행 할 수 있도록 해 놓는 것을 &lt;strong&gt;소프트웨어 프로비저닝&lt;/strong&gt;이라고 합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;수동-환경-구축의-위험성&quot;&gt;수동 환경 구축의 위험성&lt;/h3&gt;

&lt;p&gt;환경 구축을 자동화하면 어떤 점이 좋을까??&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;수동으로 환경을 구축할 때는 다음과 같은 상황에서 문제점이 발생할 수 있습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;서버를 새로 추가한다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;서버에 라이브러리나 미들웨어를 설치한다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;개발 환경을 가볍게 구축한다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;새로운-서버-추가&quot;&gt;새로운 서버 추가&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;서버를 보강하는 방법&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;스케일 업: 서버의 CPU와 메모리를 고성능 제품으로 업그레이드하여 처리 성능을 올리는 방법.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;스케일아웃: 서버 수를 늘려서 성능을 올리는 방법.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;접속이 늘어나서 웹 서버나 애플리케이션 서버의 처리 성능이 부족하여 스케일아웃 방식으로 대처하는 경우가 있습니다.&lt;/p&gt;

&lt;p&gt;스케일 아웃 방식을 사용하면 비용면에서 유리하고, 서버가 한 대 정도 정지해도 서비스를 계속 제공할 수 있다는 장점이 있습니다. 하지만 웹 서버와 애플리케이션 서버를 새로 추가해야 한다는 단점도 있습니다.&lt;/p&gt;

&lt;p&gt;서버를 새로 추가할 때, 환경 구축이 자동화되어 있으면 간단한 커맨드로 서버를 추가할 수 있습니다. 
하지만 환경 구축이 자동화 되어 있지 않으면, 서버를 추가하는 데 손이 많이 가고 실수를 하기도 쉽습니다.&lt;/p&gt;

&lt;h3 id=&quot;수동환경구축의-문제점을-회피하고-환경구축을-자동화하는-구체적인-방법을-알아보겠습니다&quot;&gt;수동환경구축의 문제점을 회피하고 환경구축을 자동화하는 구체적인 방법을 알아보겠습니다.&lt;/h3&gt;

&lt;h4 id=&quot;가상화-기술-도구--가상머신vm-vagrant&quot;&gt;가상화 기술 도구 / 가상머신(VM): Vagrant&lt;/h4&gt;

&lt;p&gt;가상화는 실제 운영체제 위에 가상화 소프트웨어를 설치한 후에 소프트웨어를 통해 하드웨어를 에뮬레이션한 후 이 위에 운영체제를 설치하는 것을 의미합니다. 가상화 해주는 소프트웨어를 하이퍼바이저라고합니다.&lt;/p&gt;

&lt;p&gt;다음 그림에서 보이는 가상화 부분에 해당하는 하이퍼바이저 설치, 운영체제 설치, 애플리케이션 설치 및 설정은 모든 개발자가 다 똑같이 해줘야 하는 작업입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;가상화의 개념&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.lesstif.com/download/attachments/24445417/image2015-5-20%200%3A58%3A37.png?version=1&amp;amp;modificationDate=1432050369000&amp;amp;api=v2&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vagrant는 이런 문제를 해결하기 위한 솔루션으로 설정 스크립트를 기반으로 특정 환경의 가상 머신을 만들어서 신속하게 개발 환경을 구축하고 공유할 수 있게 만들어진 솔루션입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Box 파일&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;가상머신 시작시 기반이되는 이미지 파일&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;가상환경을 만드는데 필요함&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;일반적으로 OS 이미지에서 작성한다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Vagrant를 사용할 때 최소한의 설정 조건&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;Vagrant 사용자&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;sshd 시작&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;프로비저닝 도구&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Vagrantfile&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;가상머신의 사양이나 프로비저닝 도구의 지정 등 가상 머신의 구성&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Ruby 기반으로 작성&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;기본적으로 파일과 프로비저닝 도구 설정으로 2개의 파일이 있다면 동일한 환경 구성이 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;가상화-기술-도구--docker&quot;&gt;가상화 기술 도구 / Docker&lt;/h4&gt;

&lt;p&gt;컨테이너 기반(프로세스)의 오픈소스 가상화 플랫폼(OS가상화와 조금은 다른 개념)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Docker의 주요 개념&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;컨테이너&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;도커이미지&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;오버레이 네트워크&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;유니온 파일 시스템&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;도커 이미지란??&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;컨테이너 실행에 필요한 파일과 설정값 등을 포함하고 있는 것으로 상태값을 가지지 않고 변하지 않음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;도커에서 가장 중요한 개념은 컨테이너와 함께 이미지라는 개념입니다&lt;/em&gt;
&lt;img src=&quot;https://subicura.com/assets/article_images/2017-01-19-docker-guide-for-beginners-1/docker-image.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이미지는 &lt;strong&gt;컨테이너 실행에 필요한 파일과 설정값등을 포함하고 있는 것&lt;/strong&gt;으로 상태값을 가지지 않고 변하지 않습니다. 컨테이너는 이미지를 실핸한 상태라고 볼 수 있고 추가되거나 변하는 값은 컨테이너에 저장됩니다. 같은 이미지에서 여러개의 컨테이너를 생성할 수 있고 컨테이너의 상태가 바뀌거나 컨테이너가 삭제되더라도 이미지는 변하지 않고 그대로 남아있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;도커 이미지 관리&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;URL방식으로 태그를 붙일 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;컨테이너란??&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;도커 이미지를 실행한 상태, 추가되거나 변하는 값을 컨테이너에 저장&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;도커이미지와 컨테이너관계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;도커이미지에서 여러개의 컨테이너를 생성가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;컨테이너의 상태가 바뀌거나 삭제되어도 도커이미지는 변하지 않고 그대로 남아 있음&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;오버레이 네트워크란?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;오버레이 네트워크(Overlay network)는 물리 네트워크 위에 성립되는 가상의 컴퓨터 네트워크입니다. 이 오버레이 네트워크 안의 노드는 가상, 논리 링크로 연결될 수 있으며, 각 링크는 네트워크 안에서 많은 물리적 링크를 통하지만 물리적 링크를 고려하지는 않습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;유니온 파일 시스템이란?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unionfs는 Linux, FreeBSD 및 NetBSD를 위한 파일 시스템 서비스로, 다른 파일 시스템을 위한 통합 마운트를 구현 합니다. 분기라고하는 별도의 파일 시스템의 파일과 디렉토리를 투명하게 겹쳐서 하나의 일관된 파일 시스템으로 만듭니다. 병합 된 분기 내에서 동일한 경로를 갖는 디렉토리의 내용은 새로운 가상 파일 시스템 내의 단일 병합 된 디렉토리에서 함께 볼 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;command와-api&quot;&gt;Command와 API&lt;/h4&gt;

&lt;p&gt;도커 클라이언트의 커맨드 명령어는 정말 잘 만들어져 있습니다. 대부분의 명령어는 직관적이고 사용하기 쉬우며 컨테이너의 복잡한 시스템 구성을 이해하지 못하더라도 편하게 사용할 수 있습니다. 또한 http기반의 Rest API도 지원하여 확장성이 굉장히 좋고 훌륭한 3rd party 툴이 나오기 좋은 환경입니다.&lt;/p&gt;

&lt;h4 id=&quot;도커의-훌륭한-생태계&quot;&gt;도커의 훌륭한 생태계&lt;/h4&gt;

&lt;p&gt;도커는 굉장히 큰 생태계를 가지고 있고 커다란 기업과 협력하여 사실상 클라우드 컨테이너 세계의 사실상 표준이 되었습니다. 로깅, 모니터링, 스토리지, 네트워크, 컨테이너 관리, 배포 등 다양한 분야에서 다양한 툴들이 존재하며 아예 &lt;em&gt;도커를 위한 OS&lt;/em&gt;도 존재합니다. 현재 도커를 기반으로한 오픈소스 프로젝트는 10만개가 넘고 굉장히 활발하게 진행중입니다.&lt;/p&gt;

&lt;h3 id=&quot;프로비저닝-도구--ansible&quot;&gt;프로비저닝 도구 / Ansible&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;테스트 환경을 구축하는 데 사용되는 툴 Provision &amp;amp; configuration management tool&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;python으로 개발되고 YAML이라는 언어를 통해 정의할 수 있고 json으로 통신&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;python github project중 상위 랭킹(6위)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;해커 뉴스 분석을 보면 ansible이 많이 Mention이 되어지고 있음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;오픈 소스 버전 (GPL)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Asible 장점 및 지원&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;빠른 SSH 통신, 빠른 provision이 가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;추후 상용 환경에서 사용할 때 agent 기반이면 방화벽 이슈, agent 데몬 관리라는 불편한 점이 존재(agent 방식은 확장성, 대규모 provision을 할 경우 매우 효과적이지만 서버와 통신하는 부분이 고도화되기 때문에 빠르고 간단한 provision을 할 수 없음)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자동 배포 환경이 쉬움&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;개발 가능성이 높은 오픈소스&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;대부분이 멱등성을 제공&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;playbook&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ad-hoc 지원&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;병렬 provisioning 지원.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;vagrant&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;jinja2&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;멱등성&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;여러 번 적용해도 결과는 바뀌지 않음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;바뀌는 것이 없으면 당연히 배포되어도 바뀌지 않음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;바뀌는 부분이 있으면 그 부분만 반영&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;shell, command, file module은 보장 되지 않는다&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Ansible에서 멱등성이란??&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;여러번 ansible 툴을 사용하더라도 동일한 결과값이 나올 수 있도록 제공되는 형태여야 합니다. 매번 다른 결과가 나오거나 에러가 나온다면 비 멱등성하다고 할 수 있습니다. ansible 툴의 거의 대부분의 모듈은 멱등성을 제공합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;playbook&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;플레이북은 애드훅 테스트 실행 모드와는 완벽하게 다른 사용방법이며 특히 강력한 사용 방법입니다. 간단히 말해 플레이북은 정말 간단하게 설정을 관리하고 다수의 머신에 대한 배포 시스템에 대한 기본적인 단위입니다. 기존에 존재해왔던 것과 달리 복잡한 어플리케이션 형태의 배포에 매우 적절합니다. 플레이북은 설정을 정의 할 수 있으며 특정 머신의 집합을 오가며 다른 작업을 수행하도록 수동으로 작업 순서를 설정하는 것도 가능합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ad-hoc&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Adhoc이라는 의미는 임시적으로 수행하는 의미. ansible의 playbook을 작성하여 수행하는 것이 아니라 임시적으로나 또는 특별하게 어떤 작업을 수행하기 위해서 사용할 수 있는 실행방법이라고 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ansible의 한계&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;시스템의 초기 설치 수행은 불가능 (kickstart, pxe 등을 사용해야함)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;시스템 모니터링은 지원하지 않음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;시스템 변경사항은 추적하지 않음&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;서버의-상태-테스트-도구--serverspec&quot;&gt;서버의 상태 테스트 도구 / serverspec&lt;/h4&gt;

&lt;p&gt;Serverspec은 루비 테스트 프레임워크인 RSpec 형식으로 인프라 계층을 테스트할 수 있으며, 주로 통합 테스트를 지원합니다. 특정 구성 관리 도구에 의존하지 않으므로 어떤 도구를 사용해도(또는 어떤 도구도 사용하지 않고 직접 인프라를 구축했다고 해도) 테스트를 작성할 수 있다는 장점이 있습니다.&lt;/p&gt;

&lt;p&gt;Serverspec으로 테스트해야 하는 대상은 단위 테스트 수준보다 통합 테스트 수준, 조건 분기 등을 포함해 복잡한 구성이 필요한 경우에 사용하면 좋습니다.&lt;/p&gt;

&lt;p&gt;Serverspec의 원래 목적은 ‘인프라의 상태를 테스트’하는 것이 아니라 ‘인프라의 상태를 기술한 코드를 테스트’하는 것입니다. 코드 리팩터링을 지원하며 코드의 불안정한 부분을 테스트하는 기능도 지원합니다. 따라서 코드화를 가속시키는 성격의 도구입니다.&lt;/p&gt;

&lt;h3 id=&quot;웹서버-구축&quot;&gt;웹서버 구축&lt;/h3&gt;

&lt;p&gt;웹 브라우저로 표시할 HTML이나 이미지 데이터 등을 모아 두었다가 요청에 따라 전송하는 서버를 웹 서버라고 합니다. 웹 브라우저에서 HTTP를 사용해서 웹 서버에 요청을 보내면, 웹 서버는 그 요청을 받아서 필요한 처리를 합니다. 웹 서비스를 제공하려면 서버에 웹 서버 프로그램을 설치해야 합니다. 대표적인 것으로는 아파치와 Nginx등이 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;아파치&quot;&gt;아파치&lt;/h4&gt;

&lt;p&gt;아파치는 1995년 NCSA httpd1.3을 기반으로 개발을 시작한 후로 20년 가까이 높은 시장 점유율을 유지하며 1위 자리를 지켜 왔습니다. 최근 몇 년은 계속 점유율이 떨어지는 추세이지만, 오랜 역사를 이어 온 만큼 안정적이며 많은 사용자에게 사랑받는 웹서버입니다.&lt;/p&gt;

&lt;p&gt;워낙 다양한 추가기능에, 구축이 쉽다는 이유 때문에 많이 쓰고 있습니다. 하지만 Apache자체만으로 엄청 무거운데다가, Squid와 함께 Slowloris취약점이 발견되었기에, 보통 프로그래밍 능력이 능숙한 사람들이나, 대형사이트 운영자는 Nginx,IIS를 주로 쓰고 있습니다.&lt;/p&gt;

&lt;p&gt;오픈소스(open source) 라이선스에 따라 무료로 배포되어 원하는 사람들이 자유롭게 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;유닉스·윈도 등을 비롯해 거의 모든 운영체제와 시스템에서 운용이 가능합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache의 특징&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;쓰레드 / 프로세스 기반 구조로 요청 하나당 쓰레드 하나가 처리하는 구조&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;사용자가 많으면 많은 쓰레드 생성, 메모리 및 CPU 낭비가 심함&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;하나의 쓰레드 : 하나의 클라이언트 라는 구조&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Apache의 특징&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;정적 컨텐츠의 효율적인 제공&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tomcat보다 10% 더 향상된 속도&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클러스터링을 제공&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;보안문제의 해결&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다중 웹사이트 호스팅을 제공&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다양한 모듈을 제공&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;nginx&quot;&gt;Nginx&lt;/h4&gt;

&lt;p&gt;트래픽이 많은 웹사이트를 위해 확장성을 위해 설계한 비동기 이벤트 기반구조의 웹서버 소프트웨어입니다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;더 적은 자원으로 더 빠르게 서비스한다&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;가벼움과 높은 성능을 목표로 만들어 졌으며, 러시아의 프로그래머,이고르 시쇼브가 Apache의 C10K Problem(하나의 웹서버에 10,000개의 클라이언트의 접속을 동시에 다룰 수 있는 기술적인 문제)를 해결하기 위해 만든 Event-driven구조의 HTTP, Reverser Proxy, IMAP/POP PROXY server를 제공하는오픈소스 서버 프로그램입니다.&lt;/p&gt;

&lt;p&gt;Apache는 전 세계 서버에 70%의 점유율(2015.7기준)을 차지하고 있던 무지막지한 서버였지만, 지금은 다릅니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;nginx의 특징&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;비동기 Event-Driven 기반 구조.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다수의 연결을 효과적으로 처리가능.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;대부분의 코어 모듈이 Apache보다 적은 리소스로 더 빠르게 동작가능&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;더 작은 쓰레드로 클라이언트의 요청들을 처리가능&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Nginx의 장점&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;보안
앞 단의 nginx로 리버스 프록시로 사용하고 뒷단에는 WAS를 설치하여 외부에 노출되는 인터페이스에 대해 Nginx WAS 부분만 노출 가능합니다. 
익명의 사용자가 직접적인 Web Server로의 접근을 한다라고 하면 문제가 발생할 수 있기 때문에 직접적이지 않고 한 단계를 더 거침으로써 보안적인 부분을 처리할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Backend-service 장애 대응 처리
Backend-service 에 대해 max fails, fail timeout시 백업 서버로 진입할 수 있도록 처리 가능합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;빠른 속도&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 06 Jan 2018 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>List와 array의 차이점</title>
        <link>/blackruby-code/code/2018/01/03/List&Array.html</link>
        <guid isPermaLink="true">/blackruby-code/code/2018/01/03/List&Array.html</guid>
        <description>&lt;h1 id=&quot;list와-array의-차이점&quot;&gt;List와 Array의 차이점&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;배열의 장점: 인덱스가 있어서 데이터의 접근이 빠르다.&lt;/li&gt;
  &lt;li&gt;배열의 단점: 인덱스 &amp;lt;-&amp;gt; 데이터 매핑 구조이기 때문에, 데이터가 삭제되면 해당 공간이 낭비된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;List는 배열의 index라는 장점을 버리고, 빈틈없는 데이터의 적재라는 장점을 취한 자료구조이다.&lt;/p&gt;

&lt;p&gt;배열에 데이터를 추가하려면 기존에 있는 데이터 혹은 인덱스와 매핑된 자리에만 데이터를 삽입할 수 있다. 
&lt;img src=&quot;http://cfile10.uf.tistory.com/image/2216FE4D562AD89B1B38BE&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;리스트의 경우,
&lt;img src=&quot;http://cfile3.uf.tistory.com/image/23555F3F562AD89D277968&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;인덱스가 하나씩 밀리면서 순서를 유지한다.&lt;/p&gt;

&lt;p&gt;결론적으로 List에서는 인덱스보다, 데이터들 간의 순서를 더 중요시한다.&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Jan 2018 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>RESTful 파이썬 웹 제작</title>
        <link>/blackruby-code/python/2017/12/31/PythonAPI.html</link>
        <guid isPermaLink="true">/blackruby-code/python/2017/12/31/PythonAPI.html</guid>
        <description>&lt;h1 id=&quot;restful-파이썬-웹-서비스-제작&quot;&gt;RESTful 파이썬 웹 서비스 제작&lt;/h1&gt;

&lt;h2 id=&quot;장고를-이용한-레스트풀-api의-개발&quot;&gt;장고를 이용한 레스트풀 API의 개발&lt;/h2&gt;

&lt;h3 id=&quot;간단한-sqlite-데이터-베이스와-대화하는-레스트풀-api-디자인&quot;&gt;간단한 SQLite 데이터 베이스와 대화하는 레스트풀 API 디자인&lt;/h3&gt;

&lt;p&gt;우리는 가장 적절한 &lt;strong&gt;객체 관계형 매핑&lt;/strong&gt;을 선택하고 구성하는 데 시간을 낭비하고 싶지 않다. 가능한 한 빨리 레스트풀 API를 완성하고 모바일 앱을 통해 대화를 시작하길 원한다. 우리는 게임을 데이터베이스로 운영하길원하는데, 제작 준비가 필요하지 않으므로 복잡한 설치 또는 구성에 시간을 낭비하지 않고 가능하면 가장 단순한 관계형 데이터베이스를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;DRF라는 장고 레스트 프레임워크를 사용하면, 이 작업을 쉽게 완료해서 레스트풀 웹 서비스의 첫 번째 버전에 대한 HTTP 요청을 시작할 수 있다. 여기서는 새로운 장고 레스트 프레임 워크 프로젝트의 기본 데이터베이스인 매우 간단한 SQLite 데이터베이스로 작업할것이다.&lt;/p&gt;

&lt;p&gt;주요 자원에 대한 요구사항을 지정해야 한다. 다음 속성 또는 필드가 필요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;정수 식별자&lt;/li&gt;
  &lt;li&gt;이름 또는 타이틀&lt;/li&gt;
  &lt;li&gt;출시일&lt;/li&gt;
  &lt;li&gt;3D RPG 또는 2D 모바일 아케이드와 같은 게임 카테고리 디스크립션&lt;/li&gt;
  &lt;li&gt;플레이어가 적어도 한 번 게임을 했는지 여부를 나타내는 bool 값&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음의 표는 첫 번째 API 버전에서 지원해야 하는 HTTP 동사, 범위, 그 메서드에 대한 의미를 보여준다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;HTTP동사&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;범위&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;의미&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;게임 컬렉션&lt;/td&gt;
      &lt;td&gt;컬렉션의 모든 저장도니 게임을 얻고, 이름에 따라 오름차순으로 정렬한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GET&lt;/td&gt;
      &lt;td&gt;게임&lt;/td&gt;
      &lt;td&gt;게임 하나만 얻는다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POST&lt;/td&gt;
      &lt;td&gt;게임 컬렉션&lt;/td&gt;
      &lt;td&gt;컬렉션에 새 게임 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PUT&lt;/td&gt;
      &lt;td&gt;게임&lt;/td&gt;
      &lt;td&gt;기존 게임 업데이트&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
      &lt;td&gt;게임&lt;/td&gt;
      &lt;td&gt;기존 게임 삭제&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;각-http-메서드가-수행하는-작업-이해&quot;&gt;각 HTTP 메서드가 수행하는 작업 이해&lt;/h3&gt;

&lt;p&gt;새 게임을 만들려면 HTTP 동사(POST)와 요청 &lt;strong&gt;URL&lt;/strong&gt;로 HTTP 요청을 작성해 보내야한다. 더욱이 &lt;strong&gt;JSON&lt;/strong&gt; 키-값 쌍으로 필드 이름과 값을 제공해 새 게임을 만들어야 한다. 요청 결과, 서버는 필드에 제공된 값의 유효성을 검사하고 유효한 게임인지 확인한 후 데이터베이스에 저장한다.&lt;/p&gt;

&lt;p&gt;서버는 적절한 테이블에 새 게임이 들어간 새 행을 삽입하고, JSON으로 직렬화된 최근 추가 게임의 JSON 본문과 201 Created 상태 코드를 반환하는데, 여기에는 데이터베이스가 자동으로 생성하고 게임 객체에 지정한 할당 id 또는 기본 키가 포함된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST http://localhost:8000/games/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;id 또는 기본 키가 지정된 숫자 값과 일치하는 게임을 얻으려면 HTTP 동사(GET)와 요청 &lt;strong&gt;URL&lt;/strong&gt;을 사용해서 HTTP 요청을 작성해 보내야 하는데, 여기서 {id}에는 id나 기본 키에 해당하는 숫자 값을 저장한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET http://localhost:8000/games/{id}/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;id 또는 기본 키가 지정된 숫자 값과 일치하는 게임을 업데이트하려면 HTTP 동사(PUT)와 요청 &lt;strong&gt;URL&lt;/strong&gt;을 사용해 HTTP 요청을 작성해 보내야 하는데, 여기서 {id} 자리에는 제공된 데이터로 생성된 게임의 해당 값으로 대체한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PUT http://localhost:8000/games/{id}/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;id 또는 기본 키가 지정된 숫자 값과 일치하는 게임을 제거하려면 HTTP 동사(DELETE)와 요청 &lt;strong&gt;URL&lt;/strong&gt;을 사용해서 HTTP 요청을 작성해 보내야 하는데, 여기서 {id} 자리에 해당 숫자를 적는다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DELETE http://localhost:8000/games/{id}/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;경량-가상-환경에서의-작업&quot;&gt;경량 가상 환경에서의 작업&lt;/h3&gt;

&lt;p&gt;먼저, 가상 환경을 위한 대상 폴더 또는 디렉터리를 선택해야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/PythonREST/Django
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;터미널을 열고, 다음 명령을 실행해 가상 환경을 만든다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 -m venv ~/PythonREST/Django01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;맥 OS 또는 리눅스에서 bash 셸을 사용하게 터미널을 구성한 경우, 다음 명령을실행해 가상 환경을 활성화해야한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source ~/PythonREST/Django01/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;가상환경이 활성화 되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Yoon-MacBook-Pro:~ project$&lt;/code&gt; 에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;(Django) Yoon-MacBook-Pro:~ project$&lt;/code&gt;으로 프롬프트가 변경된다.&lt;/p&gt;

&lt;h3 id=&quot;장고-레스트-프레임워크에서의-가상-환경-설정&quot;&gt;장고 레스트 프레임워크에서의 가상 환경 설정&lt;/h3&gt;

&lt;p&gt;이제 다음의 명령을 실행해 장고 웹 프레임워크를 설치해야 한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install Django
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;장고 웹 프레임워크를 설치했으므로 장고 레스트 프레임워크를 설치할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install djangorestframework
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 다음 명령을 실행해 gamesapi라는 새 장고 프로젝트를 만든다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;django-admin.py startproject gamesapi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 나서 다음 명령을 실행해 gamesapi 장고 프로젝트 내에 games라는 새 장고 앱을 만든다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py startapp games
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 명령으로 다음 파일들이 들어간 새 gamesapi/games 서브 폴더가 생성되었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;admin.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apps.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;models.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tests.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;views.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apps.py&lt;/code&gt;파일의 파이썬 코드 ex)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;From django.apps import AppConfig

Class GamesConfig(AppConfig):
	name='games'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 gamesapi/settings.py 파일을 열고 설치된 앱 선언의 문자열 리스트를 지정하는 행인 INSTALLED_APPS행을 찾아 다음의 내용을 추가한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;‘rest_framework’&lt;/li&gt;
  &lt;li&gt;‘games.app.GamesConfig’&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;모델-제작&quot;&gt;모델 제작&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;games/models.py&lt;/code&gt; 파일을 연다. 아래 행은 이 파일의 초기 코드를 보여주는데, 하나의 import문과 모델을 생성해야 함을 나타내는 주석이 있다.&lt;/p&gt;

&lt;p&gt;아래 행은 Game 클래스, 특히 &lt;code class=&quot;highlighter-rouge&quot;&gt;games/models.py&lt;/code&gt; 파일에 있는 Game 모델을 만들기 위한 새 코드를 보여준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;From django.db import models 

Class Game(models.Model):
	Created = models.DateTimeField(auto_now_add=True)
	Name = models.CharField(max_length=200, blank=True, default='')
	release_date = models.DateTimeField()
	game_category = models.CharField(max_length=200, blank=True, default='')
	played = models.BooleanField(default=False)
	
	class Meta:
		ordering = ('name',)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음으로는 새 Game 모델의 초기 마이그레이션을 만들어야 한다. 
장고는 SQLite 데이터베이스를 사용한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py makemigrations games
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 생성된 마이그레이션을 적용하기 위해 다음 파이썬 스크립트를 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 명령을 실행하면 gamesapi 프로젝트의 루트 폴더에 db.sqlite3 파일이 생긴 것을 볼 수 있다. 장고가 생성한 테이블을 보려면 SQLite 명령 행 또는 SQLite 데이터베이스의 테이블을 쉽게 점검할 수 있게 해주는 애플리케이션을 사용하면 된다.&lt;/p&gt;

&lt;p&gt;다음의 명령을 실행해 생성된 테이블을 나열해 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sqlite3 db.sqlite3 '.tables'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SQLite 데이터베이스 엔진과 데이터베이스 파일 이름은 &lt;code class=&quot;highlighter-rouge&quot;&gt;gamesapi/settings.py&lt;/code&gt; 파이썬 파일에 지정돼 있다. 다음 행은 장고가 사용하는 모든 데이터베이스에 대한 설정을 담고 있는 DATABASE 딕셔너리의 선언을 보여준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.sqlite3',
		'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;마이그레이션을 실행한 후, SQLite 데이터베이스에는 다음 테이블이 생겼을 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;auth_group&lt;/li&gt;
  &lt;li&gt;auth_group_permissions&lt;/li&gt;
  &lt;li&gt;auth_permission auth_user&lt;/li&gt;
  &lt;li&gt;auth_user_groups&lt;/li&gt;
  &lt;li&gt;auth_user_groups_permissions&lt;/li&gt;
  &lt;li&gt;django_admin_log&lt;/li&gt;
  &lt;li&gt;django_content_type&lt;/li&gt;
  &lt;li&gt;django_migrations&lt;/li&gt;
  &lt;li&gt;django_session&lt;/li&gt;
  &lt;li&gt;games_game&lt;/li&gt;
  &lt;li&gt;sqlitesequence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;games_game&lt;/code&gt; 테이블에는 SQLite 형식의 다음 행(필드라고도 함)이 있으며, 그 중 모두가 null 값도 가능한 것은 아니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;id: The integer primary key, an autoincrement row&lt;/li&gt;
  &lt;li&gt;created: datetime&lt;/li&gt;
  &lt;li&gt;name: varchar(200)&lt;/li&gt;
  &lt;li&gt;release_date: datetime&lt;/li&gt;
  &lt;li&gt;game_category: varchar(200)&lt;/li&gt;
  &lt;li&gt;played: bool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음 행은 우리가 마이그레이션을 실행했을 때 장고가 생성한 SQL 생성 스크립트다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE &quot;games_game&quot; {
	&quot;id&quot; integer NOT NULL PRIMARY KEY AUTOINCREMENT,
	&quot;created&quot; datetime NOT NULL,
	&quot;name&quot; varchar(200) NOT NULL,
	&quot;release_date&quot; datetime NOT NULL,
	&quot;game_category&quot; varchar(200) NOT NULL,
	&quot;played&quot; bool NOT NULL
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 31 Dec 2017 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>웹 엔지니어 - 환경구축의 자동화</title>
        <link>/blackruby-code/web/2017/12/25/Web7.html</link>
        <guid isPermaLink="true">/blackruby-code/web/2017/12/25/Web7.html</guid>
        <description>&lt;h2 id=&quot;환경-구축-자동화&quot;&gt;환경 구축 자동화&lt;/h2&gt;

&lt;h3 id=&quot;수동-환경-구축의-위험성&quot;&gt;수동 환경 구축의 위험성&lt;/h3&gt;

&lt;p&gt;환경 구축을 자동화 하려면 어떤 점이 좋을까요? 일단 수동으로 환경을 구축할 때는 다음과 같은 상황에서 문제가 생길 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;서버를 새로 추가한다&lt;/li&gt;
  &lt;li&gt;서버에 라이브러리나 미들웨어를 설치한다&lt;/li&gt;
  &lt;li&gt;개발 환경을 가볍게 추구한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;새로운-서버-추가&quot;&gt;새로운 서버 추가&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;서버를 보강하는 방법&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;방법&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;설명&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;스케일업&lt;/td&gt;
      &lt;td&gt;서버의 CPU와 메모리를 고성능 제품으로 업그레이드하여 처리 성능을 올리는 방법&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;스케일아웃&lt;/td&gt;
      &lt;td&gt;서버 수를 늘려서 성능을 올리는 방법&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;서버에-라이브러리나-미들웨어-설치&quot;&gt;서버에 라이브러리나 미들웨어 설치&lt;/h4&gt;

&lt;p&gt;서버에 라이브러리나 미들웨어를 추가하는 상황을 생각해봅시다. 당연히 라이브러리의 미들웨어를 설치할 때 시간이 걸리고, 서버 수가 늘어나면 어떤 서버에는 설치하고 어떤 서버에는 설치하지 않는 상황도 발생합니다. 서버마다 같은 라이브러리와 미들웨어를 사용할 때, 같은 버전을 설치했는지 확인하고 싶어도 여러 서버의 버전을 관리해야 하므로 이 또한 큰일입니다.&lt;/p&gt;

&lt;p&gt;하지만 환경 구축을 자동화하고, 관리작업을 ansible등 프로비저닝 도구와 서버 상태를 테스트하는 Serverspec에 맡기는 편이 안심할 수 있고 안전합니다.&lt;/p&gt;

&lt;h4 id=&quot;간단한-개발-환경-구축&quot;&gt;간단한 개발 환경 구축&lt;/h4&gt;

&lt;p&gt;지금까지 소개한 사례로 환경 구축을 수동으로 할 때 여러 가지 번거로운 문제가 생길 수 있음을 알 수 있었습니다. 그래서 이런 문제들을 회피하고 환경 구축을 자동화하는 방법을 사용해야 합니다.&lt;/p&gt;

&lt;h3 id=&quot;vagrant&quot;&gt;Vagrant&lt;/h3&gt;

&lt;p&gt;Vagrant는 한마디로 VirtualBox나 VMWare, Amazon EC2와 같은 가상화 소프트웨어의 프런트 엔드라고 할 수 있습니다. CUI로 간단히 서버를 시작하거나 정지할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;vagrant-도입&quot;&gt;Vagrant 도입&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;virtualbox-설치&quot;&gt;VirtualBox 설치&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ VBoxManage -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;vagrant로-가상-머신-실행--centos7의-예-&quot;&gt;Vagrant로 가상 머신 실행 ( CentOS7의 예 )&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant box add centos7 \
&amp;gt; https://github.com/tommy-muehle/puppet-vagrant-boxes/releases/download/1.1.0/ \ 
&amp;gt; centos-7.0-x86_64.box
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;vagrant box list 커맨드로 사용할 수 있는 Box 목록을 확인할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant box list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Box를 사용하여 Vagrant를 초기화합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir -p ~/work/vagrant/sample
$ cd ~/work/vagrant/sample
$ vagrant init centos7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;가상머신-관리&quot;&gt;가상머신 관리&lt;/h5&gt;

&lt;p&gt;가상 머신을 일시정지할 때는, vagrant suspend 커맨드, 일시정지에서 복귀할 때는 vagrant resume 커맨드, 셧다운할 때는 vagrant halt 커맨드를 사용합니다. 서버를 다시 실행하려면 vagrant up이라고 하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant suspend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant halt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;커맨드와-셸-스크립트-실행&quot;&gt;커맨드와 셸 스크립트 실행&lt;/h4&gt;

&lt;p&gt;이제 가상 머신의 시작, 일시정지, 셧다운 등 작업을 할 수 있습니다. 이외에도 Vagrant를 사용하면 여러 가지 동작을 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;예를 들어, 시작할 때 간단한 커맨드를 실행시켜 봅시다. Vagrantfile의 내용에 프로비저닝 처리를 추가해서 vagrant up 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VAGRANTFILE_API_VERSION = &quot;2&quot;
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
	config.vm.box = &quot;centos7&quot;
	config.vm.provision :shell, inline: &quot;echo foobar&quot;
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프로비저닝은 처음 시작할 때만 실행합니다. 처리가 필요할 때는 명시적으로 vagrant up –provision으로 지정하거나 프로비저닝만 실행하는 vagrant provision 커맨드를 사용합니다.&lt;/p&gt;

&lt;p&gt;프로비저닝을 실행해봅시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant provision
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;터미널에 foobar가 출력되었을 것입니다. 이처럼 가상 머신을 시작할 때 임의의 커맨드를 실행 할 수 있습니다. 게다가 단순 커맨드뿐만 아니라 셸 스크립트를 사용할 수도 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;여러-대의-가상-머신을-한-번에-실행&quot;&gt;여러 대의 가상 머신을 한 번에 실행&lt;/h4&gt;

&lt;p&gt;두 대의 가상 머신 (web1과 web2)을 한 번에 실행해 보겠습니다. 생각보다 간단해서 다음처럼 private_network 설정에서 각각 다른 IP를 지정하면 됩니다. 하지만 이렇게 하면 시작할 때마다 ssh의 포트포워드 포트 번호가 바뀌어서 불편합니다. forwarded_port 설정을 변경해서 호스트 쪽 포트 번호를 임의의 포트 번호로 고정해둡시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VAGRANTFILE_API_VERSION = &quot;2&quot;
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
	config.vm.define :web1 do |node|
		node.vm.box=&quot;centos7&quot;
		node.vm.network &quot;rivate_network&quot;, ip: &quot;192.0.0.1&quot;
		node.vm.network &quot;forwarded_port&quot;, guess: 22, host: 2000, id: &quot;ssh&quot;
	end	
	
	config.vm.define :web2 do |node|
		node.vm.box=&quot;centos7&quot;
		node.vm.network &quot;private_network&quot;, ip: &quot;192.0.0.1&quot;
		node.vm.network &quot;forwarded_port&quot;, guess: 22, host: 2001, id: &quot;ssh&quot;
	end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;가상-머신에-ssh로-로그인&quot;&gt;가상 머신에 ssh로 로그인&lt;/h4&gt;

&lt;p&gt;vagrant ssg-config 커맨드는 ‘~/.ssh/config’용 설정을 생성하므로, 이 커맨드를 사용해서 ssh 커맨드로 로그인할 수 있게 하면 편리합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant ssh-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant ssg-config &amp;gt;&amp;gt; ~/.ssh/config
$ ssh web1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;amazon-ec2-인스턴스-실행&quot;&gt;Amazon EC2 인스턴스 실행&lt;/h4&gt;

&lt;p&gt;Amazon EC2를 사용해서 AWS에 서버를 실행 해 봅시다.&lt;/p&gt;

&lt;p&gt;먼저 Vagrantfile을 작성합니다. 이번에는 vagrant init 커맨드를 실행할 때 인수를 지정하지 않습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir ~/work/vagrant/ec2
$ cd !!:$
cd ~/work/vagrant/ec2
$ vagrant init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Provider로 VirtualBox가 아니라 AWS를 사용하려면 vagrant-aws 플러그인이 필요합니다. vagrant plugin install 커맨드로 플러그인을 설치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant plugin install vagrant-aws
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant box add dummy https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;dummy라는 이름의 Box를 추가했습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant box list
centos7 (virtualbox, 0)
dummy (aws, 0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;나머지-편리한-플러그인-소개&quot;&gt;나머지 편리한 플러그인 소개&lt;/h4&gt;

&lt;p&gt;Vagrant 편리한 플러그인을 소개합니다.&lt;/p&gt;

&lt;h5 id=&quot;sahara-플러그인&quot;&gt;sahara 플러그인&lt;/h5&gt;

&lt;p&gt;sahara는 샌드박스 모드를 유효하게 하는 플러그인입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant plugin install sahara
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 샌드박스 모드 실행 
$ vagrant sandbox on 

# 롤백하고 싶을 때 
$ vagrant sandbox rollback

# 확장하고 싶을 때 
$ vagrant sandbox commit

# 샌드박스 모드 종료(커밋하지 않은 변경은 취소된다)
$ vagrant sandbox off

# 샌드박스의 상태 확인
$ vagrant sandbox status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;vagrant-cachier-플러그인&quot;&gt;vagrant-cachier 플러그인&lt;/h5&gt;

&lt;p&gt;프로비저닝 등에서 다운로드한 yum 등 패키지를 캐싱하여 다음부터 다운로드 시간을 줄여 주는 플러그인 입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant plugin install vagrant-cachier
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;global-status&quot;&gt;global-status&lt;/h5&gt;

&lt;p&gt;vagrant global-status 커맨드도 꽤 편리합니다. 이전에는 플러그인으로 제공했지만, 최근에는 Vagrant에 포함됐습니다. 이 플러그인을 사용하면 Vagrant에서 다루는 모든 가상 머신의 현재 상태를 표시합니다. 어느 가상 머신이 어느 경로에서 실행 중인지 알 수 있으므로 가상 머신 관리에 사용할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;vagrant-가상화-이미지&quot;&gt;Vagrant 가상화 이미지&lt;/h4&gt;

&lt;p&gt;하드웨어 위에 호스트 OS가 있고, 그 위에 하이퍼바이저라는 가상 머신을 에뮬레이트하는 기능이 있습니다. 하이퍼바이저 위에서 가상 머신을 실행하고, 그 안에서 게스트 OS를 동작합니다. 하이퍼바이저에 해당하는 것이 VirtualBox나 VMware, Amazon EC2 등 가상화 소프트웨어입니다.&lt;/p&gt;

&lt;h3 id=&quot;ansible&quot;&gt;Ansible&lt;/h3&gt;

&lt;p&gt;Ansible은 프로비저닝 도구 중 하나로, 매우 문턱이 낮아 간편하게 도입할 수 있는 것이 특징입니다. ssh 로그인만 할 수 있으면 대상 서버에는 아무것도 필요 없습니다.&lt;/p&gt;

&lt;h4 id=&quot;ansible-도입&quot;&gt;Ansible 도입&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant init centos7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 다음처럼 Vagrantfile을 설정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VAGRANTFILE_API_VERSION = &quot;2&quot;
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
	config.vm.define :server1 do |node|
		node.vm.box=&quot;centos7&quot;
		node.vm.network &quot;rivate_network&quot;, ip: &quot;192.0.0.1&quot;
		node.vm.network &quot;forwarded_port&quot;, guess: 22, host: 2000, id: &quot;ssh&quot;
	end	
	
	config.vm.define :server2 do |node|
		node.vm.box=&quot;centos7&quot;
		node.vm.network &quot;private_network&quot;, ip: &quot;192.0.0.1&quot;
		node.vm.network &quot;forwarded_port&quot;, guess: 22, host: 2001, id: &quot;ssh&quot;
	end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;나머지는 vagrant up 커맨드를 실행하면 됩니다. 이것으로 server1과 server2라는 가상 머신 두 대를 시작합니다. 다음처럼 ssh로 로그인할 수 있게 합시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant ssg-config &amp;gt;&amp;gt; ~/.ssh/config
$ ssh server1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 상태로는 어느 서버에 접속했는지 쉽게 알 수 없어 불편하므로, 가상 머신을 시작할 때 프로비저닝으로 호스트 이름을 설정하는 처리를 추가하겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VAGRANTFILE_API_VERSION = &quot;2&quot;
change_hostname = &amp;lt;&amp;lt;SCRIPT
sudo hostname $1
sudo echo HOSTNAME=$1 &amp;gt;&amp;gt; /etx/sysconfig/network
sudo service network restart
SCRIPT

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
	config.vm.define :server1 do |node|
		node.vm.box=&quot;centos7&quot;
		node.vm.network &quot;rivate_network&quot;, ip: &quot;192.0.0.1&quot;
		node.vm.network &quot;forwarded_port&quot;, guess: 22, host: 2000, id: &quot;ssh&quot;
		node.vm.provision :shell so |s|
			s.inline = change_hostname
			s.args = ['server1']
		end
	end	
	
	config.vm.define :server2 do |node|
		node.vm.box=&quot;centos7&quot;
		node.vm.network &quot;private_network&quot;, ip: &quot;192.0.0.1&quot;
		node.vm.network &quot;forwarded_port&quot;, guess: 22, host: 2001, id: &quot;ssh&quot;
		node.vm.provision :shell do |s|
			s.inline = change_hostname
			s.args = ['server2']
		end
	end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;인벤토리-파일-준비&quot;&gt;인벤토리 파일 준비&lt;/h4&gt;

&lt;p&gt;이번에는 host 이름으로 인벤토리 파일을 만들었습니다. 임의의 그룹을 정의할 수도 있으므로, server1과 server2 양쪽을 포함하는 그룹을 ‘all-server’로, server1만 포함하는 그룹을 ‘dev-servers’로 했습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[all-server]
server[1:2]

[dev-servers]
server1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;간단한-처리-실행&quot;&gt;간단한 처리 실행&lt;/h4&gt;

&lt;p&gt;예를 들어, Ansible을 사용해서 server1에 ping을 날려 봅시다. -i 옵션으로 인벤토리 파일을 지정하고, 그 다음에 대상으로 할 서버를 지정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ansible -i hosts server1 -m ping
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;server1뿐만 아니라 server2에서도 한꺼번에 ping을 실행하려면, 인벤토리에 지정한 그룹 이름인 all-servers나 all이라는 특별한 키워드를 지정해야합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ansible -i hosts all-servers -m ping
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;playbook으로-복잡한-처리-실행&quot;&gt;playbook으로 복잡한 처리 실행&lt;/h4&gt;

&lt;p&gt;좀 더 복잡한 처리를 실행하려면, ansible-playbook 커맨드를 사용합니다.&lt;/p&gt;

&lt;p&gt;MySQL을 설치하는 상황을 생각해 보겠습니다. 우선 MySQL을 설치해서 실행하는 설정 파일을 준비합니다. 예를 들어 mysql-playbook.yml이라고 합시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
- hosts: dev-servers # 대상 서버를 지정한다 
  sudo: yes
  tasks: 
  - name: add repository
    yum: name=http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm state-present
    
  
  - name: install mysql
    yum: name=mysql-server enablerepo=epel,rpmforge state-installed # 설치된 상태로 한다
  - name: start mysql
    service: name=mysqld state=running enabled=yes # 시작된 상태로 한다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행 커맨드&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ansible-playbook -i hosts mysql-playbook.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;멱등성-확보&quot;&gt;멱등성 확보&lt;/h4&gt;

&lt;p&gt;이번에는 server2에도 MySQL을 설치하는 경우를 생각해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
- hosts: all-servers # 이곳을 변경한다 
  sudo: yes
  tasks:
  - name: add repository
    yum: name=http://repo.mysql.com/mysql-community-release-el7-t.noarch.rpm state=present
    
    
  - name: install mysql
    yum: name=mysql-server enablerepo=epel,rpmforge state=installed # 설치된 상태로 한다 
  - name: start mysql 
    service: name=mysqld state=running enabled=yes # 시작된 상태로 한다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실행 커맨드&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ andible-playbook -i hosts mysql-playbook.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;파일-끝-추가&quot;&gt;파일 끝 추가&lt;/h4&gt;

&lt;p&gt;yum 모듈과 service 모듈을 사용한 경우라면 멱등성을 확보하므로 괜찮지만, shell 모듈로 임의의 커맨드를 실행할 때는 멱등성을 확보하지 않으므로 구현하는 쪽에서 멱등성을 확보할 필요가 있습니다. 예를 들어, 다음 playbook을 실행하면 실행할 때마다 파일 끝에 test라는 출력을 추가합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
- hosts: dev-servers
  tasks: 
  - shell: echo test &amp;gt;&amp;gt; /tmp/foobar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이래서는 곤란합니다. 그래서 이때는 다음처럼 register 모듈과 when 모듈을 사용합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
- hosts: dev-servers
  tasks: 
  - shell: echo test &amp;gt;&amp;gt; /tmp/foobar
    register: result
  - shell: echo test &amp;gt;&amp;gt; /tmp/foobar
    when: result.stdout.find('test') == -1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음에서는 테스트에서 when 모듈을 사용하여 여기서 지정한 조건을 만족할 때만 /tmp/foobar 끝에 test라는 문자열을 추가하도록 지정했습니다. result.stdout.find(‘test’)는 표준 출력 안에 test 문자열이 포함되어 있으면 그 인덱스를, 포함되어 있지 않으면 -1을 반환합니다. 이렇게 지정하면 /tmp/foobar에 test 문자열이 없을 때만 끝에 test를 추가하는 조건부 처리가 가능합니다.&lt;/p&gt;

&lt;p&gt;먼저 /tmp/foobar에 test가 없을 때를 확인해 보자. 테스트를 위해 server1에 /tmp/foobar라는 이름으로 빈 파일을 하나 만듭니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ssh server1 # server1에 접속해서 
$ touch /tmp/foobar # 빈파일을 만든다
$ logout
$ ansible-playbook -i hosts shell-playbook.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;나머지-편리한-모듈-소개&quot;&gt;나머지 편리한 모듈 소개&lt;/h4&gt;

&lt;p&gt;changed_when 모듈은 어떤 때 changed로 표시할지 조건을 지정합니다. 또, debug 모듈은 특정 변수 이름의 내용과 메시지를 출력할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--- 
- hosts: dev-servers
  tasks:
  - shell: cat /tmp/foobar
    register: result
    changed_when: False
  - shell: echo test &amp;gt;&amp;gt; /tmp/foobar
    when: result.stdout.find('test') == -1
  - debug: var=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;serverspec&quot;&gt;Serverspec&lt;/h3&gt;

&lt;p&gt;서버의 상태를 테스트하는 프레임워크인 Serverspec은 프로비저닝 결과를 제대로 설정했는지 확인할 때 도움을 줍니다. Ruby로 구현되어 있으며, Ruby 테스트 프레임워크인 RSpec에 따른 형태로 기술할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;serverspec-도입&quot;&gt;Serverspec 도입&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install serverspec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;테스트-드리븐-프로비저닝&quot;&gt;테스트 드리븐 프로비저닝&lt;/h4&gt;

&lt;p&gt;아파치용 테스트 템플릿을 생성했지만, 이번에는 아파치가 아니라 Nginx를 사용할 것이므로 다음처럼 httpd를 nginx로 변경합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'spec_helper'

# Nginx가 설치되어 있을 것
describe package('nginx') do 
	it { shoud be_installed }
end

# Nginx가 자동 실행하도록 설정되어 있을 것
# Nginx가 실행 중일 것
describe service('nginx') do 
	it { should be_enabled }
	it { should be_running }
end 

# 80번 포트가 열려 있을 것
describe port(80) do 
	it { should be_listening }
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;테스트의 실행&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rake spec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모든 테스트가 실패할것입니다. server1에는 아직 Nginx가 설치되어 있지 않으니 당연한 결과입니다.&lt;/p&gt;

&lt;p&gt;그럼, Nginx를 설치하고 그상태에서 테스트하면 성공한느지 확인해 봅시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--- 
- hosts: dev-servers
  sudo: yes
  tasks: 
  - name: install nginx
    yum: name=nginx state=installed
  - name: start nginx
    service: name=nginx state=running enabled=yes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ansible-playbook -i hosts nginx-playbook.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;docker&quot;&gt;Docker&lt;/h3&gt;

&lt;p&gt;Docker는 Go 언어로 기술한 가상화를 구현하는 소프트웨어입니다. Docker를 사용하면 Heroku나 CircleCI처럼 배포와 테스트를 할 때마다 다른 환경을 준비할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;docker-가상화-이미지&quot;&gt;Docker 가상화 이미지&lt;/h4&gt;

&lt;p&gt;Vagrant와 Docker는 어떻게 다를까? 둘 다 가상화 기술이지만 가상화의 방법이 다르다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Vagrant와 Docker의 차이&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;Vagrant&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;하이퍼바이저형&lt;/td&gt;
      &lt;td&gt;컨테이너형&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;호스트 OS와 다른 OS를 다룰 수 있다&lt;/td&gt;
      &lt;td&gt;호스트 OS와 같은 OS만 처리할 수 있다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;애뮬레이트하는 만큼 시작에 시간이 걸린다&lt;/td&gt;
      &lt;td&gt;바로 시작한다&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;docker-도입&quot;&gt;Docker 도입&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir ~/work/vagrant/docker
$ cd !!:$
$ vagrant init centos7
$ vagrant up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 가상 머신을 시작했습니다. vagrant ssh 커맨드로 로그인한 후 Docker를 설치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum update
$ sudo vi /etc/yum.repos.d/docker.repo

# 다음 내용을 입력하고 저장한다
[dockerrepo]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/centos/7
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg

# Docker를 설치한다
$ sudo yum -y install docker-engine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음 커맨드로 Docker를 실행하고 자동 실행 설정도 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo systemctl start docker 
$ sudo systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;docker-테스트&quot;&gt;Docker 테스트&lt;/h4&gt;

&lt;p&gt;docker run 커맨드로 임의의 Docker 이미지에 임의의 처리를 실행할 수 있습니다. 예를 들어, ‘Hello World’를 표시해 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run centos /bin/echo &quot;Hello World&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;centos라는 Docker 이미지에서 컨테이너를 생성하여 ‘Hello World’를 출력하고, 출력이 끝나면 바로 컨테이너를 종료합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;주요옵션&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;옵션&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;설명&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-d&lt;/td&gt;
      &lt;td&gt;백그라운드에서 실행한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-i&lt;/td&gt;
      &lt;td&gt;컨테이너 표준 입력을 연다. /bin/bash 등에서 컨테이너를 조작할 때 지정한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-t&lt;/td&gt;
      &lt;td&gt;tty(단말 디바이스)를 확보한다. /bin/bash 등에서 컨테이너를 조작할 때 지정한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-p -p&lt;호스트 포트=&quot;&quot; 번호=&quot;&quot;&gt;:&lt;컨테이너 포트=&quot;&quot; 번호=&quot;&quot;&gt;&lt;/컨테이너&gt;&lt;/호스트&gt;&lt;/td&gt;
      &lt;td&gt;포트 매핑을 설정한다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;셸에서의 Nginx 설치 커맨드&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -i -t centos /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;docker-이미지를-만든다&quot;&gt;Docker 이미지를 만든다&lt;/h5&gt;

&lt;p&gt;Nginx를 설치한 상태를 Docker이미지로 저장해 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컨테이너 목록은 docker ps 커맨드로 표시할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker ps -a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;‘docker commit &lt;컨테이너 ID=&quot;&quot;&gt; &lt;임의의 이름=&quot;&quot;&gt;'으로 지정하면 컨테이너의 Docker 이미지를 원하는 일므으로 저장할 수 있습니다.&lt;/임의의&gt;&lt;/컨테이너&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker commit e07 sasata299/nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;docker-이미지로-컨테이너를-시작한다&quot;&gt;Docker 이미지로 컨테이너를 시작한다&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker run -d -p 80:80 sasata299/nginx /usr/sbin/nginx -g 'deamon off;'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vagrantfile에 private_network 설정이 되어 있으면, 브라우저로도 Nginx의 실행을 확인할 수 있습니다.&lt;/p&gt;

&lt;h5 id=&quot;컨테이너-관리&quot;&gt;컨테이너 관리&lt;/h5&gt;

&lt;p&gt;Docker 컨테이너를 정지하고 삭제해 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker stop b80ea2d658cd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;docker rm 커맨드를 사용하면 컨테이너를 완전히 삭제합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker rm b80ea2d658cd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;docker-이미지-관리&quot;&gt;Docker 이미지 관리&lt;/h5&gt;

&lt;p&gt;Docker 이미지의 삭제는 docker rmi 커맨드를 사용합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker rmi &amp;lt;이미지명&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;dockerfile로-docker-이미지-만들기&quot;&gt;Dockerfile로 Docker 이미지 만들기&lt;/h4&gt;

&lt;p&gt;간단히 Docker 이미지를 만드는 방법을 실험해 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo test &amp;gt; index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 Dockerfile은 다음 내용으로 준비합니다. Nginx를 설치하고 작성한 index.html을 /usr/share/nginx/html(DocumentRoot)에 배치하는 처리를 설정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM centos
MAINTAINER yoon &amp;lt;zizou0812@gmail.com&amp;gt;
RUN rpm -Uvh \
	http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm
RUN yum install -y nginx
ADD index.html /usr/share/nginx/html/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;docker build 커맨들르 사용하면, Dockerfile을 바탕으로 Docker 이미지를 만들 수 있습니다. 여기서는 ‘yoon/nginx’라는 이름의 버전 0.1로 지정했습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker build -t yoon/nginx:0.1 .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;docker-이미지-공유&quot;&gt;Docker 이미지 공유&lt;/h4&gt;

&lt;p&gt;Docker 이미지 공유는 ‘Docker Hub’에서 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;사용자 등록이 끝났으면, docker login 커맨드로 로그인합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker login 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 docker push 커맨드로 이미지를 등록해보겠습니다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ docker push yoon/nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Docker Hub에 등록한 상태에서 docker search 커맨드로 검색해 봅시다. 등록한 Docker 이미지를 찾을 수 있을 것입니다. 이것으로 이미지를 전세계에서 누구나 이용할 수 있게 되었습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;docker 커맨드 목록&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;커맨드&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;설명&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;run&lt;/td&gt;
      &lt;td&gt;Docker 이미지를 가져와서 컨테이너를 시작하고, 그 안에서 임의의 처리를 실행한다. 종료 후 컨테이너를 종료한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;images&lt;/td&gt;
      &lt;td&gt;Docker 이미지 목록을 표시한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ps&lt;/td&gt;
      &lt;td&gt;현재 실행 중인 컨테이너 목록을 표시한다. -a 옵션을 사용하면 정지된 컨테이너도 표시한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;stop&lt;/td&gt;
      &lt;td&gt;지정한 컨테이너를 정지한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rm&lt;/td&gt;
      &lt;td&gt;지정한 컨테이너를 삭제한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rmi&lt;/td&gt;
      &lt;td&gt;지정한 Docker 이미지를 삭제한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;build&lt;/td&gt;
      &lt;td&gt;Dockerfile을 사용하여 Docker 이미지를 만든다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;commit&lt;/td&gt;
      &lt;td&gt;컨테이너를 Docker 이미지로 저장한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pull&lt;/td&gt;
      &lt;td&gt;Docker 이미지를 리포지터리에서 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;push&lt;/td&gt;
      &lt;td&gt;Docker 이미지를 리포지터리에 등록한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;search&lt;/td&gt;
      &lt;td&gt;Docker 이미지를 리포지터리에서 검색한다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;docker로-ci-테스트&quot;&gt;Docker로 CI 테스트&lt;/h4&gt;

&lt;p&gt;Docker의 예로 Jenkins에서 CI 테스트 환경을 Docker로 만든 후 매번 클린 환경으로 테스트하는 방법을 자주 사용합니다.&lt;/p&gt;

&lt;h5 id=&quot;java-설치&quot;&gt;Java 설치&lt;/h5&gt;

&lt;p&gt;Jenkins는 Java에서 동작하므로, yum 커맨드를 사용하여 Java를 설치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum -y install java-1.7.0-openjdk
$ sudo yum -y install wget
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;jenkins-설치&quot;&gt;Jenkins 설치&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo wget -0 /etc/yum.repos.d/jenkins.repo http://pkh.jenkins-ci.org/redhat/jenkins.repo
$ sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
$ sudo yum -y install jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;자동 실행 설정&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service Jenkins start
$ sudo chkconfig Jenkins on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;jenkins-사용자를-docker-그룹에-추가&quot;&gt;Jenkins 사용자를 docker 그룹에 추가&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo gpasswd -a Jenkins docker 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;jenkins-설정&quot;&gt;Jenkins 설정&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM yoon/nginx:0.1
RUN git clone &amp;lt;임으의 리포지터리&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Mon, 25 Dec 2017 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>웹 엔지니어 - 데이터 시각화</title>
        <link>/blackruby-code/web/2017/12/25/Web6.html</link>
        <guid isPermaLink="true">/blackruby-code/web/2017/12/25/Web6.html</guid>
        <description>&lt;h2 id=&quot;데이터-시각화&quot;&gt;데이터 시각화&lt;/h2&gt;

&lt;h3 id=&quot;왜-구글-차트인가&quot;&gt;왜 구글 차트인가&lt;/h3&gt;

&lt;p&gt;구글 차트는 구글에서 제공하는 HTML5, SVG 기능을 이용한 그래프 라이브러리입니다. 구글 차트를 JavaScript에 삽입하면 쉽게 그래프를 그릴 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;막대-그래프&quot;&gt;막대 그래프&lt;/h3&gt;

&lt;h4 id=&quot;유스케이스&quot;&gt;유스케이스&lt;/h4&gt;

&lt;p&gt;막대 그래프를 사용하는 유스케이스 예는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;작년 같은 달의 액세스 총수를 비교하고 싶다.&lt;/li&gt;
  &lt;li&gt;이번 달 시간별 상품 매출 비교를 지난달과 비교하고 싶다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;예제-표시&quot;&gt;예제 표시&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.gstatic.com/charts/loader.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'current'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]});&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOnLoadCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drawChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drawChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visualization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrayToDataTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Sales'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Expenses'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Profit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2014'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2015'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1170&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;460&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2016'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;660&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2017'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1030&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;540&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;350&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Company Performance'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;subtitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Sales, Expenses, and Profit: 2014-2017'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;bars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'horizontal'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Required for Material Bar Charts.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'barchart_material'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;convertOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;barchart_material&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width: 900px; height: 500px;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;jsapi를-읽어-온다&quot;&gt;jsapi를 읽어 온다&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://www.gstatic.com/charts/loader.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;사용하고-싶은-api를-호출한다&quot;&gt;사용하고 싶은 API를 호출한다&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;google.charts.load('current', {'packages':['bar']});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;페이지-그릴-때-값을-설정한다&quot;&gt;페이지 그릴 때 값을 설정한다&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;google.charts.setOnLoadCallback(drawChart);

      function drawChart() {
        var data = google.visualization.arrayToDataTable([
          ['Year', 'Sales', 'Expenses', 'Profit'],
          ['2014', 1000, 400, 200],
          ['2015', 1170, 460, 250],
          ['2016', 660, 1120, 300],
          ['2017', 1030, 540, 350]
        ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;임의의-id-요소에-그린다&quot;&gt;임의의 ID 요소에 그린다&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var chart = new google.charts.Bar(document.getElementById('barchart_material'));

chart.draw(data, google.charts.Bar.convertOptions(options));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;누적-막대-그래프&quot;&gt;누적 막대 그래프&lt;/h3&gt;

&lt;h4 id=&quot;유스케이스-1&quot;&gt;유스케이스&lt;/h4&gt;

&lt;p&gt;누적 막대 그래프를 사용하는 유스케이스 예는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;월별 액세스 총수 중 PC, iPhone, Android 비교&lt;/li&gt;
  &lt;li&gt;월별 사용자의 남녀 비교&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;누적 막대 그래프는 시계열로 비교하고 싶을 때 주로 사용합니다.&lt;/p&gt;

&lt;h4 id=&quot;예제-표시-1&quot;&gt;예제 표시&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.gstatic.com/charts/loader.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'current'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]});&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOnLoadCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drawChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drawChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visualization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrayToDataTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
	        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Genre'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Fantasy &amp;amp; Sci Fi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Romance'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Mystery/Crime'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'General'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	         &lt;span class=&quot;s1&quot;&gt;'Western'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Literature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'annotation'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
	        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2010'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
	        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2020'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
	        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2030'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

     	 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	        &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	        &lt;span class=&quot;na&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'top'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	        &lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;groupWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'75%'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
	        &lt;span class=&quot;na&quot;&gt;isStacked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'columnchart_material'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;convertOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;columnchart_material&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width: 800px; height: 500px;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;꺾은선-그래프&quot;&gt;꺾은선 그래프&lt;/h3&gt;

&lt;h4 id=&quot;유스케이스-2&quot;&gt;유스케이스&lt;/h4&gt;

&lt;p&gt;꺾은선 그래프를 사용하는 유스케이스 예는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전월과 비교했을 때 당월 계정 증가율&lt;/li&gt;
  &lt;li&gt;전월과 비교했을 때 당월 매출 증가율&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;예제-표시-2&quot;&gt;예제 표시&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.gstatic.com/charts/loader.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'current'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'corechart'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]});&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOnLoadCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drawChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drawChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visualization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrayToDataTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Year'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Sales'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Expenses'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2004'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2005'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1170&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;460&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2006'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;660&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;1120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2007'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1030&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;540&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Company Performance'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;curveType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'function'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bottom'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visualization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LineChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'curve_chart'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;curve_chart&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width: 900px; height: 500px&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;산포도&quot;&gt;산포도&lt;/h3&gt;

&lt;h4 id=&quot;유스케이스-3&quot;&gt;유스케이스&lt;/h4&gt;

&lt;p&gt;산포도를 사용하는 유스케이스 예는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;계정별 매출과 매매 횟수의 상관&lt;/li&gt;
  &lt;li&gt;계정별 로그인 횟수와 매출 금액의 상관&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;예제-표시-3&quot;&gt;예제 표시&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.gstatic.com/charts/loader.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'current'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'corechart'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]});&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOnLoadCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drawChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drawChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visualization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arrayToDataTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Weight'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mf&quot;&gt;5.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mf&quot;&gt;3.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Age vs. Weight comparison'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;hAxis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;minValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;vAxis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Weight'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;minValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'none'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visualization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ScatterChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'chart_div'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;chart_div&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width: 900px; height: 500px;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;외부-json-파일과-url-읽기&quot;&gt;외부 JSON 파일과 URL 읽기&lt;/h3&gt;

&lt;h4 id=&quot;json-데이터-작성&quot;&gt;JSON 데이터 작성&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;cols&quot;: [
        {&quot;id&quot;:&quot;&quot;,&quot;label&quot;:&quot;Topping&quot;,&quot;pattern&quot;:&quot;&quot;,&quot;type&quot;:&quot;string&quot;},
        {&quot;id&quot;:&quot;&quot;,&quot;label&quot;:&quot;Slices&quot;,&quot;pattern&quot;:&quot;&quot;,&quot;type&quot;:&quot;number&quot;}
      ],
  &quot;rows&quot;: [
        {&quot;c&quot;:[{&quot;v&quot;:&quot;Mushrooms&quot;,&quot;f&quot;:null},{&quot;v&quot;:3,&quot;f&quot;:null}]},
        {&quot;c&quot;:[{&quot;v&quot;:&quot;Onions&quot;,&quot;f&quot;:null},{&quot;v&quot;:1,&quot;f&quot;:null}]},
        {&quot;c&quot;:[{&quot;v&quot;:&quot;Olives&quot;,&quot;f&quot;:null},{&quot;v&quot;:1,&quot;f&quot;:null}]},
        {&quot;c&quot;:[{&quot;v&quot;:&quot;Zucchini&quot;,&quot;f&quot;:null},{&quot;v&quot;:1,&quot;f&quot;:null}]},
        {&quot;c&quot;:[{&quot;v&quot;:&quot;Pepperoni&quot;,&quot;f&quot;:null},{&quot;v&quot;:2,&quot;f&quot;:null}]}
      ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;json-데이터-구조-확인&quot;&gt;JSON 데이터 구조 확인&lt;/h4&gt;

&lt;p&gt;JSON 데이터의 구조는 다음과 같습니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;배열 이름&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;설명&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;cols&lt;/td&gt;
      &lt;td&gt;열(데이터 이름 등을 지정)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rows&lt;/td&gt;
      &lt;td&gt;행(이름과 관련된 값을 저장)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;셀&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;json-파일로-html-파일-만들기&quot;&gt;JSON 파일로 HTML 파일 만들기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Load the AJAX API--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.gstatic.com/charts/loader.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Load the Visualization API and the piechart package.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'current'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'packages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'corechart'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]});&lt;/span&gt;
      
    &lt;span class=&quot;c1&quot;&gt;// Set a callback to run when the Google Visualization API is loaded.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOnLoadCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;drawChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drawChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jsonData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./colmn-example.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;여기서&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;앞에서&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;만든&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;파일을&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;저장&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          
      &lt;span class=&quot;c1&quot;&gt;// Create our data table out of JSON data loaded from server.&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visualization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DataTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsonData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Instantiate and draw our chart, passing in some options.&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visualization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PieChart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'chart_div'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;chart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;240&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Div that will hold the pie chart--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;chart_div&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;jQuery라는 JavaScript 라이브러리를 사용합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/javascript&quot;
	src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 25 Dec 2017 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>웹 엔지니어 - 로그</title>
        <link>/blackruby-code/web/2017/12/24/Web5.html</link>
        <guid isPermaLink="true">/blackruby-code/web/2017/12/24/Web5.html</guid>
        <description>&lt;h2 id=&quot;로그&quot;&gt;로그&lt;/h2&gt;

&lt;h3 id=&quot;로그는-왜-중요한가&quot;&gt;로그는 왜 중요한가&lt;/h3&gt;

&lt;p&gt;로그가 필요한 네가지 경우&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;버그 조사&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이상 징후 감지&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;가설 검증&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;감사 로그&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;버그-조사&quot;&gt;버그 조사&lt;/h4&gt;

&lt;p&gt;원인을 조사하는 정보로 가장 효과적인 것이 시스템 로그와 액세스 로그 같은 이른바 각종 ‘로그’입니다. ‘어느 URL에 보내는 요청에서 오류가 발생했는지’, ‘파라미터는 적절하게 전달되었는지’ 알 수 있으면, 문제 해결이 쉬워 집니다.&lt;/p&gt;

&lt;h4 id=&quot;이상-징후-감지&quot;&gt;이상 징후 감지&lt;/h4&gt;

&lt;p&gt;예를 들어, 매일 CPU와 메모리, 디스크 사용량 등 데이터를 기록해서 그래프로 시각화한다면, 그래프가 갑자기 변동하거나 한계치에 가깝더라도 문제가 되기 전에 파악할 수 있습니다. 이처럼 문제를 감지하는 것이 중요합니다.&lt;/p&gt;

&lt;h4 id=&quot;가설-검증&quot;&gt;가설 검증&lt;/h4&gt;

&lt;p&gt;무엇보다도 로그를 제대로 가져와야 가설을 검증할 수 있습니다. 예를 들어, 어떤 페이지에 버튼이 있는데 그 버튼을 얼마나 눌렀는지, 로그(정보)가 없다면 그곳에 버튼을 설치한 것이 좋았는지 정량적인 판단을 할 수가 없습니다.&lt;/p&gt;

&lt;h4 id=&quot;감사-로그&quot;&gt;감사 로그&lt;/h4&gt;

&lt;p&gt;보안이라는 관점에서 로그를 생각해 보겠습니다. ‘언제, 누가, 무엇을 했는지’ 정확히 로그로 남겨 두는 것이 중요합니다. 관계형 데이터베이스에서 조작 로그 등이 이에 해당합니다. 이런 로그가 남아 있지 않다면, 문제가 일어났을 때 단서가 없어 곤란합니다.&lt;/p&gt;

&lt;h3 id=&quot;fluentd-등장-배경&quot;&gt;Fluentd 등장 배경&lt;/h3&gt;

&lt;p&gt;여러 대에 걸친 로그를 로그 서버와 같은 어딘가 전용 서버에 실시간으로 모을 수 있다면 편리할 것입니다. 이 장에서 소개할 Fluentd 로그 수집 소프트웨어가 이런 용도에 적합합니다.&lt;/p&gt;

&lt;h3 id=&quot;fluentd와-syslogd의-차이&quot;&gt;Fluentd와 syslogd의 차이&lt;/h3&gt;

&lt;p&gt;Fluentd와 syslogd의 다른점&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;로그 수집 방법과 저장소 등 유연한 사용자화&lt;/li&gt;
  &lt;li&gt;로그에 태그를 붙여 쉽게 관리&lt;/li&gt;
  &lt;li&gt;다양한 언어를 지원하는 모듈 제공&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fluentd-사용&quot;&gt;Fluentd 사용&lt;/h3&gt;

&lt;h4 id=&quot;fluentd-도입&quot;&gt;Fluentd 도입&lt;/h4&gt;

&lt;p&gt;Fluentd는 다음과 같은 방법으로 설치할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;소스코드로 Fluentd를 설치한다.&lt;/li&gt;
  &lt;li&gt;Rubygems로 Fluentd를 설치한다.&lt;/li&gt;
  &lt;li&gt;RPM이나 Dev 패키지로 td-agent를 설치한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;fluentd의-구조&quot;&gt;Fluentd의 구조&lt;/h4&gt;

&lt;source /&gt;
&lt;p&gt;디렉티브와 &lt;match&gt; 디렉티브가 있습니다.&lt;/match&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;실제로 몇가지 디렉티브를 이용해서 테스트를 해보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo / etc/init.d/td-agent start
Starting td-agent (via systemctl):	             [ OK ]
# 또는 
$ sudo systemctl start td-agent.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;fluentd에-메세지-전송&quot;&gt;Fluentd에 메세지 전송&lt;/h4&gt;

&lt;p&gt;Fluentd 설정 파일은 /etc/td-agent/td-agent.conf이므로 이 파일을 다음처럼 수정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;source&amp;gt;
	type forward
&amp;lt;/source&amp;gt;

&amp;lt;match debug.test&amp;gt;
	type stdout
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;수정을 마쳤으면 반드시 설정 파일을 다시 로드 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo systemctl reload td-agent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;로그-감시&quot;&gt;로그 감시&lt;/h4&gt;

&lt;h5 id=&quot;nginx-설치&quot;&gt;Nginx 설치&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Nginx 저장소를 설치합니다
$ sudo rpm -Uvh \
http://nginx.org/packages/centos/7/noarch/RPMS/nginx-releasecentos-7-0.el7.ngx.noarch.rpm
# Nginx를 설치한다 
$ sudo yum -y install nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nginx를 시작합니다. 자동 시작 설정도 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# httpd 데몬이 실행 중일 수도 있으니 일단 중지한다
$systemctl stop httpd.service
# Nginx 시작 및 자동 시작 설정을 한다 
$ systemctl start nginx.service
$ systemctl enable nginx.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;로그를-다른-fluentd-서버로-전송&quot;&gt;로그를 다른 Fluentd 서버로 전송&lt;/h4&gt;

&lt;p&gt;여러 대의 서버에서 동작하는 좀 더 복잡한 처리를 예로 들어 생각해 봅시다. 어떤 서버에서 Nginx의 액세스 로그를 감시하고 기록된 로그를 Fluentd로 보냅니다. 그리고 out_forward 플러그인을 사용해서 그 로그를 다른 Fluentd에 전송합니다.&lt;/p&gt;

&lt;h4 id=&quot;호스트-이름-부여&quot;&gt;호스트 이름 부여&lt;/h4&gt;

&lt;p&gt;호스트에 이름을 붙이려면 fluent-plugin-record-reformer 플러그인을 사용합니다. 이 플러그인은 외부 플러그인이므로 td-agent-gem install 커맨드로 먼저 설치해야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ /usr/sbin/td-agent-gem install fluent-plugin-record-reformer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;mongodb에-저장&quot;&gt;MongoDB에 저장&lt;/h4&gt;

&lt;p&gt;여기서는 스키마가 없는 도큐먼트 지향 데이터베이스인 MongoDB로 출력해봅니다.&lt;/p&gt;

&lt;p&gt;etc/yum.repos.d/mongodb-org-3.0.repo 파일을 다음처럼 작성하여 yum 저장소를 추가합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum -y install mongodb-org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치를 마쳤으면 자동으로 시작되도록 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo service mongod start
$ sudo chkconfig mongod on 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;액세스 로그를 MongoDB에 저장했는지 알아보는 커맨드 셸 명령어&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mongo fluentd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; db.nginx_access.find()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;fluentd의-권장-구성&quot;&gt;Fluentd의 권장 구성&lt;/h4&gt;

&lt;p&gt;실제로 Fluentd의 서버 쪽은 active-standby 구성을 권장합니다.&lt;/p&gt;

&lt;p&gt;네트워크에 연결하지 않아도 로그 수집을 멈추지 않게 하려는 것입니다. 이때는 다음 처럼 active와 standby를 따로 지정하고 standby 쪽은 &lt;server&gt; 블록 안에서 standby로 설정해야 합니다.&lt;/server&gt;&lt;/p&gt;

&lt;h3 id=&quot;로그-시각화&quot;&gt;로그 시각화&lt;/h3&gt;

&lt;p&gt;로그의 문제점을 쉽게 파악할 수 있다면 로그를 시각화하는 것도 하나의 방법입니다.&lt;/p&gt;

&lt;p&gt;예를 들어, 다음 정보를 시각화할 수 있다면 편리하지 않을까요?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;오류 로그(404, 500)추이&lt;/li&gt;
  &lt;li&gt;페이지 응답 속도 추이&lt;/li&gt;
  &lt;li&gt;응답에 일정 시간 이상 걸린 액세스 수의 추이&lt;/li&gt;
  &lt;li&gt;로그인에 실패한 수의 추이&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;엘라스틱-서치&quot;&gt;엘라스틱 서치&lt;/h3&gt;

&lt;p&gt;엘라스틱 서치(Elasticsearch)는 엘라스틱이 개발한 오픈 소스 검색엔진으로, 아파치 루씬(Apache Lucene)이라는 전문(Full text) 검색 라이브러리를 기반으로 사용합니다. 스키마를 지정하지 않고 데이터를 등록할 수 있으며, 대량으로 등록된 데이터를 거의 실시간으로 검색할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;엘라스틱서치-도입&quot;&gt;엘라스틱서치 도입&lt;/h4&gt;

&lt;h5 id=&quot;java-설치&quot;&gt;Java 설치&lt;/h5&gt;

&lt;p&gt;엘라스틱 서치는 Java로 구현하므로, 우선 Java를 설치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum -y install java-1.7.0-openjdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;엘라스틱서치-설치&quot;&gt;엘라스틱서치 설치&lt;/h5&gt;

&lt;p&gt;엘라스틱 서치는 yum 커맨드로 간단하게 설치할 수 있습니다.&lt;/p&gt;

&lt;p&gt;/etc/yum.repos.d/elasticsearch.repo 파일을 다음 내용으로 새로 만들고, yum 리포지터리를 추가합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum -y install elasticsearch
$ sudo systemctl start elaticsearch.service
$ sudo systemctl enable elasticsearch.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;엘라스틱서치-사용&quot;&gt;엘라스틱서치 사용&lt;/h4&gt;

&lt;p&gt;엘라스틱서치는 ‘인덱스’단위로 데이터를 관리합니다. 인덱스는 다음처럼 HTTP 요청으로 쉽게 생성할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -X POST http://localhost:9200/test_index
{&quot;acknowledged&quot;:true}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;fluentd에서-엘라스틱서치로-데이터-전송&quot;&gt;Fluentd에서 엘라스틱서치로 데이터 전송&lt;/h4&gt;

&lt;p&gt;엘라스틱서치로 데이터를 보낼 때는 Fluent-plugin-elasticsearch 플러그인을 사용하면 간단합니다. 이 플러그인을 사용하려면 libcurl-devel도 필요하므로 함께 설치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum -y install libcurl-devel
$ sudo /usr/sbin/td-agent-gem install fluent-plugin-elasticsearch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;서버쪽 Fluentd 설정을 다음처럼 변경합니다. 여기서는 out_copy 플러그인을 사용하여 앞에서처럼 MongoDB에 로그를 출력하면서 동시에 엘라스틱서치에도 로그를 보냅니다. out_copy는 출력을 복수의 스토리지에 복사해서 전달할 수 있는 편리한 플러그인입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;source&amp;gt;
	type forward
&amp;lt;/source&amp;gt;

&amp;lt;match hostname.nginx.access_log&amp;gt;
	type copy
	
	&amp;lt;store&amp;gt;
		type mongo
		host localhost
		port 27017
		database fluentd
		collection nginx_access
		flush_interval 10s
	&amp;lt;/store&amp;gt;
	
	&amp;lt;store&amp;gt;
		type elasticsearch
		host localhost
		port 9200
		logtash_format true
		logstash_prefix test_index
		logstash_dataformat %Y%m
		type_name nginx_access
		buffer_type memory
		buffer_chunk_limit 10m
		buffer_queue_limit 10
		flush_interval 1s
		retry_limit 16
		retry_wait 1s
	&amp;lt;/store&amp;gt;
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;인덱스-삭제&quot;&gt;인덱스 삭제&lt;/h4&gt;

&lt;p&gt;오래된 인덱스를 삭제할 때는 엘라스틱서치에서 제공하는 Curator 도구를 사용하면 편리합니다. ‘pip’라는 Python의 패키지 관리 도구를 사용해서 설치하겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo pip install elasticsearch-curator
$ sudo pip install argparse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Curator에는 여러 옵션이 있지만, 최근 며칠분의 인덱스만 남기고 오래된 인덱스를 삭제하는 사용법으로도 충분합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curator --host localhost delete --older-than 30 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;키바나&quot;&gt;키바나&lt;/h3&gt;

&lt;p&gt;카바나는 엘라스틱서치 안의 데이터를 시각화하고자 엘라스틱서치사에서 제공하는 공식 데이터 시각화 도구입니다. HTML, CSS, JS로만 구성하기 때문에 웹 서버만 준비하면 사용할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;카바나-도입&quot;&gt;카바나 도입&lt;/h4&gt;

&lt;p&gt;적당한 디렉터리에 키바나를 설치하고 Nginx의 도큐먼트 루트에 설정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -O https://download.elastic.co/kibana/kibana/kibana-3.1.0.tar.gz
$ tar zxvf kibana-3.1.0.tar.gz
$ mv kibana-3.1.0 /usr/local/
$ vi /etc/nginx/conf.d/default.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;더미-액세스-로그-생성&quot;&gt;더미 액세스 로그 생성&lt;/h5&gt;

&lt;p&gt;우선 apache-loggen을 설치합니다. Ruby 라이브러리 관리; 도구인 Rubygems를 사용할 것이므로 환경을 설정합니다. 이미 앞에서 환경을 설정했다면 건너뜁니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
$ echo 'export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;' &amp;gt;&amp;gt; ~/.bash_profile
$ echo 'eval &quot;$(rbenv init -)&quot;' &amp;gt;&amp;gt; ~/.bash_profile
$ source ~/.bash_profile
$ git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
$ sudo yum -y install gcc make openssl-devel 
$ rbenv install 2.2.3
$ rbenv global 2.2.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 Rubygems를 사용할 수 있으니 apache-loggen을 설치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install apache-loggen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;키바나-사용&quot;&gt;키바나 사용&lt;/h4&gt;

&lt;p&gt;로그를 여러 가지 관점에서 분석하고 싶을 때 간편하게 시각화할 수 있는 것이 키바나의 장점입니다.&lt;/p&gt;

&lt;p&gt;키바나에서는 다양한 그래프를 자유롭게 생성하고 배치할 수 있지만, 주로 다음 네 가지를 사용합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;히스토그램&lt;/li&gt;
  &lt;li&gt;테이블&lt;/li&gt;
  &lt;li&gt;텀&lt;/li&gt;
  &lt;li&gt;트렌드&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;히스토그램&quot;&gt;히스토그램&lt;/h5&gt;

&lt;p&gt;히스토그램에서는 시계열로 데이터를 표시하거나 특정 쿼리로 필터링할 수 있습니다.&lt;/p&gt;

&lt;h5 id=&quot;테이블&quot;&gt;테이블&lt;/h5&gt;

&lt;p&gt;테이블에서는 액세스 로그를 테이블 형식으로 표시합니다. 표시할 요소를 필터링 할 수도 있어 적절히 필터링 하면 보기가 편해집니다.&lt;/p&gt;

&lt;h5 id=&quot;텀&quot;&gt;텀&lt;/h5&gt;

&lt;p&gt;텀은 이른바 패싯 검색 결과를 표시하는 것입니다. 예를 들어, 아파치의 액세스 로그에서 Field로 Code(스테이터스 코드)를 지정하면, 각 스테이터스 코드가 몇 번씩 발생했는지 표시합니다.&lt;/p&gt;

&lt;h5 id=&quot;트렌드&quot;&gt;트렌드&lt;/h5&gt;

&lt;p&gt;트렌드는 10분 전이나 1시간 전과 비교해서 값이 어느 정도 변했는지 알려줍니다.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Dec 2017 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>웹 엔지니어 - 프론트엔드의 구현</title>
        <link>/blackruby-code/front/2017/12/24/Web4.html</link>
        <guid isPermaLink="true">/blackruby-code/front/2017/12/24/Web4.html</guid>
        <description>&lt;h2 id=&quot;프런트-엔드-구현&quot;&gt;프런트 엔드 구현&lt;/h2&gt;

&lt;h3 id=&quot;프런트-엔드-개발&quot;&gt;프런트 엔드 개발&lt;/h3&gt;

&lt;p&gt;프런트 엔드는 jQuery를 사용하여 구현하는 사례가 많습니다. 그도 그럴 것이 순수하게 JavaScript만으로 처리를 구현하려면 각 브라우저의 고유 사양에 대응해야 하므로, 개발자는 브라우저별로 처리를 구현해야 합니다. 반면에 jQuery를 사용하면 jQuery가 브라우저 간의 동작 차이를 흡수하므로, 개발자의 부담이 줄어듭니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery의 특징&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;브라우저에 의존하지 않는 DOM 조작&lt;/li&gt;
  &lt;li&gt;이벤트와 CSS 조작 등 취급이 간단&lt;/li&gt;
  &lt;li&gt;이팩트와 애니메이션&lt;/li&gt;
  &lt;li&gt;Ajax와 쉽게 통신&lt;/li&gt;
  &lt;li&gt;확장성(jQuery 플러그인)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;jquery-간단-사용법&quot;&gt;jQuery 간단 사용법&lt;/h4&gt;

&lt;p&gt;다음과 같은 페이지가 있고 선택된 요소를 JavaScript로 가져온다고 가정해봅시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fruit&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;사과&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;사과&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fruit&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;딸기&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;딸기&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;label&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fruit&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;귤&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;귤&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;jQuery를 사용하지 않고 순수 JavaScript로만 구현하는 이런 느낌일 것입니다. 먼저 document.getElementsByName으로 라디오 버튼 요소를 모두 가져와서 for 루프로 요소를 하나씩 checked인지 확인합니다. checked인 요소를 발견할 때까지 반복합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var checkedVal;
var radio buttons = document.getElementsByName('fruit');
for (var i = 0; i &amp;lt; radioButtons.length; i++) {
	if (radioButtons[i].checked) {
	checkedVal = radioButtons[i].value;
	break;
	}
}
alert(checkedVal);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;반면에 jQuery를 사용하면 다음처럼 단 두 줄만으로도 동일하게 처리할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var checkedVal = jQuery('[name=&quot;fruit&quot;]:checked').val();
alert(checked);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;dom-요소-가져오기&quot;&gt;DOM 요소 가져오기&lt;/h4&gt;

&lt;h5 id=&quot;부모-요소-가져오기&quot;&gt;부모 요소 가져오기&lt;/h5&gt;

&lt;p&gt;부모 요소를 가져오는 방법 하나를 봐도 parent, parents, closest라는 API를 제공합니다. 각 API의 차이는 다음 표와 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;부모 요소를 가져오는 API의 차이&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;API&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;설명&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;parent&lt;/td&gt;
      &lt;td&gt;바로 위 부모 요소만 가져온다(조상 요소까지 거슬러 올라가지 않는다.)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;parents&lt;/td&gt;
      &lt;td&gt;조상 요소까지 거슬러 올라가서 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;closest&lt;/td&gt;
      &lt;td&gt;지정한 인수와 일치하는 가장 가까운 조상 요소를 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;자식-요소-가져오기&quot;&gt;자식 요소 가져오기&lt;/h5&gt;

&lt;p&gt;자식 요소를 가져오는 방법으로 children, find와 같은 API가 준비되어 있습니다. 각 차이는 다음의 표와 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;자식 요소를 가져오는 API의 차이&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;API&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;설명&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;children&lt;/td&gt;
      &lt;td&gt;자식 요소만 가져온다(손자 요소는 가져오지 않는다)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;find&lt;/td&gt;
      &lt;td&gt;자손 요소까지 모두 대상으로 해서 가져온다&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;형제-요소-가져오기&quot;&gt;형제 요소 가져오기&lt;/h5&gt;

&lt;p&gt;next나 prev 등 API가 준비되어 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;형제 요소를 가져오는 API의 차이&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;API&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;설명&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;next&lt;/td&gt;
      &lt;td&gt;바로 다음에 있는 형제 요소만 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nextAll&lt;/td&gt;
      &lt;td&gt;바로 이후에 있는 모든 형제 요소를 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prev&lt;/td&gt;
      &lt;td&gt;바로 앞에 있는 형제 요소만 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prevAll&lt;/td&gt;
      &lt;td&gt;이전에 나온 모든 형제 요소를 가져온다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;jquery-오브젝트&quot;&gt;jQuery 오브젝트&lt;/h4&gt;

&lt;p&gt;jQuery는 실제로 jQuery 오브젝트라고 하는 데이터로 되어 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; $(&quot;#target&quot;) instanceof jQuery
true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DOM 요소를 가져올 때 복수의 요소가 반환되는 경우, 요소 중에서 맨 앞쪽 데이터를 추출하면 그 데이터는 jQuery 오브젝트가 아니므로 주의해야합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; $(&quot;li&quot;)
{
	&amp;lt;li&amp;gt;Foo&amp;lt;/li&amp;gt;,
	&amp;lt;li id=&quot;target&quot;&amp;gt;Target&amp;lt;/li&amp;gt;,
	&amp;lt;li&amp;gt;Bar&amp;lt;/li&amp;gt;,
	&amp;lt;li&amp;gt;Baz&amp;lt;/li&amp;gt;,
]
&amp;gt; $(&quot;li&quot;) instanceof jQuery
true
&amp;gt; $(&quot;li&quot;)[0] instanceof jQuery
false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;특정 인덱스의 요소를 가져올 때는 first 나 last, 인덱스 번호를 지정할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; $(&quot;li:first&quot;) instanceof jQuery
true
&amp;gt; $(&quot;li&quot;).eq(0) instanceof jQuery
true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;coffeescript&quot;&gt;CoffeeScript&lt;/h3&gt;

&lt;p&gt;CoffeeScript는 Ruby나 Python에서 영향을 받아 탄생한 JavaScript로 변환 가능한 프로그래밍 언어입니다. 간단히 말해, JavaScript의 신택스 슈가입니다. 컴파일하여 JavaScript로 변환할 수 있고, JavaScript보다 간결하고 코드양도 적습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CoffeeScript의 특징&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;변수를 선언하는 var가 필요 없다(자동으로 부여)&lt;/li&gt;
  &lt;li&gt;문장 끝에 ;(세미콜론)이 필요 없다&lt;/li&gt;
  &lt;li&gt;{}는 들여쓰기(인덴트)로 표현한다&lt;/li&gt;
  &lt;li&gt;()는 모호하지 않을 경우 생략할 수 있다&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;coffeescript-사용&quot;&gt;CoffeeScript 사용&lt;/h4&gt;

&lt;p&gt;CoffeeScript에서는 다음처럼 배열을 for 루프로 돌리거나 함수 정의(fuction)을 ‘-&amp;gt;’로 대신 쓸 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;names = [&quot;kyeonghan&quot;, &quot;yoon&quot;, &quot;han&quot;]

hello = (name) -&amp;gt;
	alert &quot;Hi, #{name}&quot;
	
for name in names
	hello(name if name.length &amp;gt; 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 내용을 JavaScript로 변환하기&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ coffee -c test.coffee
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Generated by CoffeeScript 1.10.0
(function() {
	var hello, i, len, name, names;
	
	name = [&quot;kyeonghan&quot;, &quot;yoon&quot;, &quot;han&quot;];
	
	hello = function(name) {
		return alert(&quot;Hi, &quot; + name);
	};
	
	for (i = 0, len = names.length; i &amp;lt; len; i++) {
		name = names[i];
		if (name.length &amp;gt; 5) {
			hello(name);
		}
	}
	
}).call(this);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript와 CoffeeScript 연산자 비교&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;CoffeeScript&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;is&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isnt&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;not&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;존재-검사-연산자&quot;&gt;존재 검사 연산자&lt;/h5&gt;

&lt;p&gt;다음과 같은 CoffeeScript가 있다고 하자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alert &quot;ok&quot; if name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JavaScript로 변환하면 다음과 같지만, 문제가 있습니다. 예를 들어, name이 ‘undefined’일 때도 alert가 실행되어 버립니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (name) {
	alert(&quot;ok&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그렇다면 존재를 검사하는 연산자를 사용하면??&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alert &quot;ok&quot; if name?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JavaScript는 다음처럼 변환됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (typeof name !== &quot;undefined&quot; &amp;amp;&amp;amp; name !== null) {
	alert(&quot;ok&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 하면 name이 ‘undefined’일 때는 alert를 실행하지 않습니다.&lt;/p&gt;

&lt;h3 id=&quot;typescipt&quot;&gt;TypeScipt&lt;/h3&gt;

&lt;p&gt;TypeScipt는 마이크로소프트가 개발한 프로그래밍 언어입니다. CoffeeScript와 마찬가지로 JavaScript의 신택스 슈가이지만, 변수를 선언할 때 데이터형을 지정할 수 있다는 특징이 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;typescipt-도입&quot;&gt;TypeScipt 도입&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo npm install -g typescript
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;typescipt-사용&quot;&gt;TypeScipt 사용&lt;/h4&gt;

&lt;p&gt;test.ts에 다음 코드를 입력합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var name:string = &quot;yoon&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컴파일해봅시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ tsc test.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;tsc 커맨드를 실행하면, 컴파일되어 test.js가 생성됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;JavaScript, CoffeeScript, TypeScipt의 차이&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;종류&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;특징&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;확장자&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;JavaScript&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;.js&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CoffeeScript&lt;/td&gt;
      &lt;td&gt;짧고 간결하게 기술할 수 있다.&lt;/td&gt;
      &lt;td&gt;.coffee&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TypeScript&lt;/td&gt;
      &lt;td&gt;데이터형을 지정할 수 있다&lt;/td&gt;
      &lt;td&gt;.ts&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;grunt&quot;&gt;Grunt&lt;/h3&gt;

&lt;p&gt;Grunt는 JavaScript로 기술된 테스크를 실행하는 자동화 도구 입니다. 최근 프런트 엔드 성능을 향상하려고 JavaScript와 CSS 파일을 최소화하고 이미지 파일을 최적화하는 일이 늘었습니다. 파일을 수정할 때마다 이런 작업을 일일이 수작업으로 하는 것은 매우 힘이 듭니다. Grunt를 사용하면 이런 작업을 자동화할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;grunt-도입&quot;&gt;Grunt 도입&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo npm install -g grunt-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Grunt를 사용할 때는 다음 두가지 파일이 필요합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;package.json&lt;/li&gt;
  &lt;li&gt;Gruntfile.js(또는 Gruntfile.coffee)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;package.json의 내용은 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ 
	&quot;name&quot;: &quot;grunt-test&quot;,
	&quot;version&quot;: &quot;0.0.0&quot;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Coffee.Script를 컴파일할 때 몇 가지 필요한 모듈이 있으므로 함께 설치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ npm install grunt --save-dev
$ npm install grunt-contrib-watch --save-dev
$ npm install grunt-contrib-coffee --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;grunt로-처리-자동화&quot;&gt;Grunt로 처리 자동화&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module.exports = (grunt)-&amp;gt;

	# 테스크 설정 
	grunt.initConfig
		pkg: grunt.file.readJSON 'package.json'
		watch:
			files: ['src/**/*.coffee']
			tasks: 'coffee'
		coffee:
			compile: files: [
				expand: true
				cwd: 'src/'
				src: ['**/*.coffee']
				dest: 'dest/'
				ext: '.js'
			]
			
		# 모듈 로드 
		grunt.loadNpmTasks 'grunt-contrib-coffee'
		grunt.loadNpmTasks 'grunt-contrib-watch'
		
		# 테스크 등록 
		grunt.registerTask 'default', ['watch']
		return
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 이 Gruntfile.coffee가 있는 디렉터리에서 grunt 커맨드를 실행합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ grunt
Running &quot;watch&quot; task
Waiting...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;javascript-프레임워크-등장&quot;&gt;JavaScript 프레임워크 등장&lt;/h3&gt;

&lt;p&gt;jQeury로 프런트 엔드 개발이 매우 편해졌다는 사실을 알았습니다. 그런데 왜 Backbone.js, AngularJS, Ember.js, Vue.js와 같은 JavaScript 프레임워크가 등장한 걸까? jQuery만으로는 부족했을까? 그 이유는 크게 두가지 입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DOM 변경에 약한 jQuery&lt;/li&gt;
  &lt;li&gt;대규모화된 프런트 엔드 개발&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;dom-변경에-약한-jquery&quot;&gt;DOM 변경에 약한 jQuery&lt;/h4&gt;

&lt;p&gt;jQeury는 아주 편리하지만, DOM을 탐색하기에는 아무래도 DOM 구조 변경에 취약합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(&quot;#target&quot;).parent().next().find(&quot;.defualt&quot;).hide();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;특정 ID요소에서 부모 요소의 형제 요소를 찾아 그중 class 이름이 default인 자손 요소를 비표시로 하는 처리입니다. jQuery에서는 이처럼 DOM을 탐색하는 처리를 간단히 기술할 수 있어 편리하지만, 그 편리함 때문에 약간만 DOM 구조를 변경해도 바르게 동작하지 않아 버그의 원인이 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;대규모화된-프런트-엔드-개발&quot;&gt;대규모화된 프런트 엔드 개발&lt;/h4&gt;

&lt;p&gt;서버사이드 개발에서는 이전부터 MVC(Model-View-Controller)라는 디자인 패턴을 이용하여 비즈니스 로직은 모델에, 디자인은 뷰에 책임을 분산했습니다. 최근 프런트 엔드 개발 규모가 커지자 서버사이드 개발과 마찬가지로 프런트 엔드 개발에서도 MVC 디자인 패턴으로 비즈니스 로직과 디자인을 따로 분리하려는 경향을 보입니다.&lt;/p&gt;

&lt;h3 id=&quot;angularjs-특징&quot;&gt;AngularJS 특징&lt;/h3&gt;

&lt;p&gt;AngularJS는 구글에서 만든 풀 스택 JavaScript 프레임워크 입니다. Backbone.js 등은 최소한의 기능만 있기 때문에 부족한 기능은 서드파티 플러그인이나 라이브러리를 조합해서 개발해야 합니다. 하지만 AngularJS에서는 필요한 기능을 기본으로 지원합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AngularJS의 특징&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTML을 그대로 템플릿으로 사용&lt;/li&gt;
  &lt;li&gt;양방향 데이터 바인딩&lt;/li&gt;
  &lt;li&gt;DI 컨테이너&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;html을-그대로-템플릿으로-사용&quot;&gt;HTML을 그대로 템플릿으로 사용&lt;/h4&gt;

&lt;p&gt;AngularJS에서는 HTML을 그대로 템플릿으로 사용할 수 있습니다. HTML을 기반으로 커스텀 태그와 커스텀 속성을 지정하여 조건 분기나 반복 등을 제어할 수 있습니다. 겉보기에는 거의 일반 HTML과 다르지 않으므로 도입하기도 쉽습니다.&lt;/p&gt;

&lt;p&gt;AngularJS에서는 커스텀 태그와 커스텀 속성을 ‘Directive’라고 합니다. ng-if나 ng-repeat등 굉장히 많은 Directive가 준비되어 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;양방향-데이터-바인딩&quot;&gt;양방향 데이터 바인딩&lt;/h4&gt;

&lt;p&gt;AngularJS의 가장 큰 특징은 양방향 데이터 바인딩입니다. 양방향 바인딩이란 ‘화면에 뭔가 입력했을 때 JavaScript 변수에 값이 반영되는 처리’와 ‘JavaScript’에서 변수 값이 변했을 때 화면에 다시 그리는 처리’를 양방향으로 하는 것 입니다. 이렇게 아주 매끄럽게 연계하는 것이 AngularJS의 강점입니다.&lt;/p&gt;

&lt;h4 id=&quot;di-컨테이너&quot;&gt;DI 컨테이너&lt;/h4&gt;

&lt;p&gt;AngularJS의 큰 특징은 ‘DI(Dependency Injection)’이라는 DI패턴을 이용해서 의존관계를 관리하는 매커니즘입니다. AngularJS를 능숙하게 사용하려면, DI 컨테이너를 반드시 이해해야 합니다. 예를 들어, 다음처럼 ‘myApp’이라는 모듈을 정의하고, 그 안에 ‘message’ 속성이 있는 ‘greetService’라는 Service를 정의하겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var myApp = angular.module(&quot;myApp&quot;, []);
myApp.service(&quot;greetService&quot;, fuction() {
	this.message = &quot;Hello World!&quot;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 Service를 다른 곳에서 호출해서 사용해 봅시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var myApp = angular.module(&quot;myApp&quot;); // sample_service.js에서 정의한 module을 가져온다
myApp.controller(&quot;MyCtrl&quot;, [&quot;$scope&quot;, &quot;greetService&quot;, function($scope, greetService) {
	$scope.greet = greetService.message;
}]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 매커니즘 덕분에 기능을 역할별로 모듈화하여 관리할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;angularjs-사용&quot;&gt;AngularJS 사용&lt;/h3&gt;

&lt;p&gt;AngularJS는 공식 사이트에서 다운로드 한뒤, script 태그로 불러오면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script src=&quot;libs/angularjs/1.2.29/angular.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또 다음처럼 구글에 호스팅되는 CDN(Contents Delivery Network)을 사용할 수도 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.29/angular.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;dom-조작&quot;&gt;DOM 조작&lt;/h4&gt;

&lt;p&gt;AngularJS에서는 DOM을 조작하려고 jqlite라는 jQuery 호환 API를 준비하여 두었습니다.&lt;/p&gt;

&lt;h5 id=&quot;jqlite&quot;&gt;jqlite&lt;/h5&gt;

&lt;p&gt;Angular.element를 사용하면 jqlite 오브젝트를 가져올 수 있습니다. HTML 안에 있는 임의의 요소를 인수로 전달하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; angular.element(document.getElementById('wrap'))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;scopeapply&quot;&gt;$scope.$apply&lt;/h5&gt;

&lt;p&gt;AngularJS에서는 $scope 속성이 변하면 화면도 자동으로 다시 그립니다. 하지만 AngularJS의 관리 밖에서 이벤트가 발생하면 자동으로 처리하지 않으므로, $scope 오브젝트 내용을 수정해도 화면에 그린 내용은 예전과 같을 때가 있습니다.&lt;/p&gt;

&lt;p&gt;다음의 내용은 focus 이벤트가 발생하지만 이 이벤트는 AngularJS의 관리 밖에 있습니다. 이때는 $scope.$apply를 사용해서 명시적으로 화면을 다시 그립니다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(&quot;#target&quot;).on(&quot;focus&quot;, function() {
	$scope.$apply(function() {
		$scope.isFocus = true;
	});
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;컨트롤러-사용&quot;&gt;컨트롤러 사용&lt;/h4&gt;

&lt;p&gt;다음 HTML을 템플릿으로 합니다. ng-controller=”MainCtrl”로 지정하여 div 요소 안에서 MainCtrl의 변수와 메소드를 사용할 수 있는 상태로 합니다. ng-repeat는 루프 처릴를 하는Directive입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.29/angular.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;controller.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MainCtrl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
			 users.
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user in users&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;()&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;MainCtrl은 다음처럼 구현합니다. $scope라는 특수한 오브젝트에 임의의 속성을 지정하고, 그 속성을 HTML 쪽에서 불러낼 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var MainCtrl = function($scope) {
	$scope.users = [
		{name: &quot;dooli&quot;, age: &quot;21&quot;},
		{name: &quot;ttochi&quot;, age: &quot;31&quot;},
		{name: &quot;gildong&quot;, age: &quot;38&quot;},
	];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;todo-리스트-구현&quot;&gt;TODO 리스트 구현&lt;/h4&gt;

&lt;p&gt;컨트롤러 쪽에서 초기 태스크를 준비하고, 초기 태스크를 ng-repeat로 표시합니다. 체크박스는 ng-model=”task.done”으로 하여 task.done값에 따라 표시를 바꿉니다. 또 ng-class를 사용하여 task.done이 true면 done이라는 이름을 붙이고, CSS에서 표시를 바꿉니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.29/angular.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;todo.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;.done&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nl&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;line-through&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;todoCtrl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task in tasks&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task.done&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{done: task.done}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript쪽은 다음처럼 name과 done 속성이 있는 태스크의 배열로 되어 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var todoCtrl = function($scope) {
	$scope.tasks = [
		{name: &quot;task1&quot;, done: true},
		{name: &quot;task2&quot;, done: false},
		{name: &quot;task3&quot;, done: false},
		{name: &quot;task4&quot;, done: false},
	];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ng-submit으로 폼을 전송하는 동작을 지정합시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.29/angular.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;todo.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nc&quot;&gt;.done&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;gray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nl&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;line-through&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;todoCtrl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task in tasks&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task.done&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{done: task.done}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
			
			# &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 추가 --&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-submit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;addNewTask()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;newTaskName&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Add&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 $scope.tasks 배열에 새로운 요소만 추가하면 화면 표시는 AngularJS가 자동으로 실행하니 아주 간단합니다. 또 마지막에 $scope.newTaskName을 비워서 다음 태스크를 매끄럽게 입력할 수 있게 해야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var todoCtrl = function($scope) {
	$scope.tasks = [
		{name: &quot;task1&quot;, done: true},
		{name: &quot;task2&quot;, done: false},
		{name: &quot;task3&quot;, done: false},
		{name: &quot;task4&quot;, done: false},
	];
	// 추가
	$scope.addNewTask = function() {
		$scope.tasks.push({name: $scope.newTaskName, done: false});
		#scope.newTaskName=&quot;&quot;;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;전체 태스트가 몇 개이고, 그중에서 몇 개를 완료했는지 표시해봅시다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
	...
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;todoCtrl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 추가 --&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
				Done:  / 
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
			
			
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task in tasks&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task.done&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{done: task.done}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
			
			
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-submit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;addNewTask()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;newTaskName&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Add&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript에서는 angular.forEach 구문으로 $scope.tasks를 계속 돌면서 각각의 task.done 값을 보고 완료된 태스크 수를 카운트 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var todoCtrl = function($scope) {
	$scope.tasks = [
		{name: &quot;task1&quot;, done: true},
		{name: &quot;task2&quot;, done: false},
		{name: &quot;task3&quot;, done: false},
		{name: &quot;task4&quot;, done: false},
	];
	// 추가
	$scope.addNewTask = function() {
		$scope.tasks.push({name: $scope.newTaskName, done: false});
		#scope.newTaskName=&quot;&quot;;
	}
	
	// 추가
	$scope.doneTaskCount = function() {
		var doneTaskCount = 0;
		angular.forEach($scope.tasks, function(task) { 
			doneTaskCount += task.done ? 1 : 0;
		});
		return doneTaskCount;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;디버깅&quot;&gt;디버깅&lt;/h5&gt;

&lt;p&gt;한 가지 더 기억해야 할 것이 바로 디버깅 방법입니다. AngularJS는 편리한 디버깅 방법을 제공합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
	...
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;todoCtrl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 추가 --&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
				Done:  / 
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
			
			
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task in tasks&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;task.done&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
					&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{done: task.done}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
			
			
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-submit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;addNewTask()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;newTaskName&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Add&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
			
			&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 추가 --&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;	
				
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;서버-통신&quot;&gt;서버 통신&lt;/h4&gt;

&lt;p&gt;여기서는 Rails를 사용해서 서버 쪽에 간단한 API를 준비합니다. 먼저 새로 Rails 프로젝트를 준비합니다. 여기서는 ‘angular-sample’이름으로 프로젝트를 만들겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails new angular-sample --skip-bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음으로 bundle install 커맨드로 필요한 gem을 설치합니다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd angular-sample
$ bundle install --path=vendor/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이번에는 User 정보를 다루는 API를 준비합니다. Users 컨트롤러와 User 모델이 필요합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails g controller users
$ rails g model user name
$ rake db:migrate
$ rails generate controller top index
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;TOP 페이지는 Top 컨트롤러의 index 액션을 담당하게 합시다. config/routes.rb를 다음처럼 작성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root 'top#index'
resource :users
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;뷰는 다음처럼 AngularJS를 사용하도록 설정합니다. 또, ngResource 모듈을 사용하므로 이 모듈을 뷰에서 로드합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myApp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.29/angular.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.29/angular-resource.min.js&amp;gt;&amp;lt;/script&amp;gt;
		&amp;lt;script src=&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MainCtrl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userName&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;addUser()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Add&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user in users&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;API 쪽 컨트롤러는 다음처럼 작성합니다. RESTful API로 되어 있습니다. index 액션으로 모든 사용자의 정보를 반환하고 show 액션으로 특정 사용자의 정보를 반환합니다. 또, create 액션에서는 주어진 파라미터를 이용하여 사용자를 새로 생성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class UserController &amp;lt; ApplicationController
	def index
		render json: User.all
	end
	
	def show
		render json: User.find(params[:id])
	end 
	
	def create
		render json: User.create(user_name)
	end
	private 
	
	def user_params
		params.require(:user).permit(:name)
	end
end	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;이제 index.html.erb에서 로드한 angular.js에 구체적인 처리를 구현합니다.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var app = angular.module(&quot;myApp&quot;, [&quot;ngResource&quot;]);

  # Rails의 CSRF Token 대책
  app.config([&quot;$httpProvider&quot;, function($httpProvider) {
      csrfToken = angular.element('meta[name=csrf-token]').attr('content')
      $httpProvidr.defaults.headers.post['X-CSRF-Token'] = csrfToken
      $httpProvidr.defaults.headers.put['X-CSRF-Token'] = csrfToken
      $httpProvidr.defaults.headers.patch['X-CSRF-Token'] = csrfToken 
  }]);

  var MainCtrl = function($scope, $resource) {
      var User = $resource(&quot;/users&quot;);

      $scope.users = User.query();

      $scope.addUser = function() {
          User.save({name: $scope.userName}, function(user) {
              $scope.users.push(user);
          });

          $scope.userName = &quot;&quot;;
      };
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;ngResource에서 사용할 수 있는 액션&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;액션&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;HTTP 메소드&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;get&lt;/td&gt;
      &lt;td&gt;GET&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;save&lt;/td&gt;
      &lt;td&gt;POST&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;query&lt;/td&gt;
      &lt;td&gt;GET&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;delete&lt;/td&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;remove&lt;/td&gt;
      &lt;td&gt;DELETE&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/p&gt;
&lt;h3 id=&quot;서비스&quot;&gt;서비스&lt;/h3&gt;

&lt;p&gt;AngularJS에는 서비스라는 편리한 매커니즘이 있습니다. 서비스는 함수와 오브젝트 등을 AngularJS 애플리케이션 안에서 공유하는 매커니즘 입니다. 싱글톤으로 다루므로 컨틀로러 간 공유에도 이용할 수 있습니다. 다음은 대표적인 서비스 입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$location&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$timeout&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$cookieStore(ngCookies)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;location&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$location&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$location&lt;/code&gt;은 window.location을 AngularJS로 랩핑한 서비스입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta content=&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.29/angular.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;location.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LocationCtrl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
			
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;컨트롤러 쪽에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;$location&lt;/code&gt;을 넘겨주고 그 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt;가 갖게 하여 뷰쪽에서도 &lt;code class=&quot;highlighter-rouge&quot;&gt;$location&lt;/code&gt;을 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var app = anular.module('app', []);
app.controller('LocationCtrl', ['$scope', '$location', function($scope, $location) {
	$scope.$location = $location;
}]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;timeout&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$timeout&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$timeout&lt;/code&gt;은 window.setTimeout을 AngularJS로 랩핑한 서비스입니다.&lt;/p&gt;

&lt;p&gt;AngularJS가 관리하지 않는 setTimeout 등 함수를 사용해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt; 값을 변경해도 화면을 다시 그리지 않습니다. 화면을 갱신하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;$timeout&lt;/code&gt;을 사용해야 합니다. 사용법은 setTimeout과 완전히 똑같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta content=&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.29/angular.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;timeout.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TimeoutCtrl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
			
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var app = anular.module('app', []);
app.controller('TimeoutCtrl', ['$scope', '$timeout', function($scope, $timeout) {
	$timeout(function() {
		$scope.message = '3초가 지났어요!'
	}, 3000);
}]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;cookiestorengcookie&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$cookieStore(ngCookie)&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;ngCookie 모듈을 사용하면, 쿠키를 간단하게 조작할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&amp;gt;
	&amp;lt;head&amp;gt;
		&amp;lt;meta content=&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.29/angular.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.29/angular-cookies.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cookies.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CookieCtrl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
			
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var app = angular.module('app', ['ngCookies']);
app.controller('CookieCtrl', ['$scope', '$cookieStroe', function($scope, $cookieStore) {
	$cookieStore.put(&quot;name&quot;, &quot;dooli&quot;);
	$scope.name = $cookieStore.get(&quot;name&quot;);
}]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;초기화-처리&quot;&gt;초기화 처리&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$rootScope&lt;/code&gt;에 API의 URL을 지정하면 다음처럼 처리한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var app = angular.module(&quot;app&quot;, []);
app.run(function() {
	$rootScope.apiUrl = &quot;http://exmaple.com/users&quot;;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 24 Dec 2017 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>웹 엔지니어 - 데이터베이스</title>
        <link>/blackruby-code/web/2017/12/24/Web3.html</link>
        <guid isPermaLink="true">/blackruby-code/web/2017/12/24/Web3.html</guid>
        <description>&lt;h3 id=&quot;nosql-데이터베이스와-관계형-데이터베이스의-차이&quot;&gt;NoSQL 데이터베이스와 관계형 데이터베이스의 차이&lt;/h3&gt;

&lt;h4 id=&quot;관계형-데이터베이스의-특징&quot;&gt;관계형 데이터베이스의 특징&lt;/h4&gt;

&lt;p&gt;SQL을 사용하면 누구나 똑같이 데이터를 조작할 수 있으므로, 현재는 사실상 데이터 저장소 표준이 되었습니다.&lt;/p&gt;

&lt;h4 id=&quot;관계형-데이터베이스의-강점&quot;&gt;관계형 데이터베이스의 강점&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;데이터의 일관성을 보증할 수 있다(트랜잭션)&lt;/li&gt;
  &lt;li&gt;정규화를 전제로 하므로 갱신 비용이 적다&lt;/li&gt;
  &lt;li&gt;JOIN이나 복잡한 검색 조건으로 검색할 수 있다&lt;/li&gt;
  &lt;li&gt;오래된 기술이라 실적과 노하우가 축적되어 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;관계형-데이터베이스의-약점&quot;&gt;관계형 데이터베이스의 약점&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;단순하고 빠르게 결과를 반환한다&lt;/li&gt;
  &lt;li&gt;대량의 데이터를 저장하여 처리한다&lt;/li&gt;
  &lt;li&gt;갱신이 발생하는 테이블에서 인덱스를 작성하고 스키마를 변경한다&lt;/li&gt;
  &lt;li&gt;칼럼을 결정하기 어렵다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;redis&quot;&gt;Redis&lt;/h3&gt;

&lt;p&gt;Redis는 이탈리아의 살바토레 산필리포가 개발한 오픈 소스 소프트웨어입니다. Key-Value 저장소라는 의미에서 맴캐시드와 비슷하지만, 메모리 기반으로 휘발성이면서 영속성을 지원하는 특징이 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;redis를-사용하는-이유&quot;&gt;Redis를 사용하는 이유&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;영속화 기능이 있다&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;메모리에서 데이터의 스냅샷을 임의의 조건에서 파일로 저장합니다. 기본으로 15분에 1개 이상, 5분에 10개 이상, 1분에 1만개 이상 Key를 변경할 때는 파일로 저장하는데, 저장 조건은 자유롭게 변경할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;다양한 형식의 데이터를 다룰 수 있다&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Redis에서는 문자열형, 리스트형, 세트형, 정렬된 세트형, 해시형 같은 다양한 데이터형이 준비되어 있어 용도에 맞게 이용할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;아토믹하게 처리할 수 있다&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;이것은 간단하게 말해 ‘일련의 처리를 한 번의 명령으로 처리’하는 것입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;redis-설치&quot;&gt;Redis 설치&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo su - 
$ yum -y install redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;redis-cli-사용&quot;&gt;Redis-cli 사용&lt;/h4&gt;

&lt;p&gt;Redis에는 redis-cli 커맨드라인 클라이언트가 있습니다. redis-cli를 사용해서 데이터를 저장하거나 읽을 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ redis-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ruby에서-redis-사용&quot;&gt;Ruby에서 Redis 사용&lt;/h4&gt;

&lt;p&gt;redis gem의 사용&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;통째로 저장하기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'rubygems'
require 'redis'

redis = Redis.new

redis.set 'bar',[1,2,3]
p redis.get 'bar'

# =&amp;gt; &quot;[1,2,3]&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;json 저장하기&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'rubygems'
require 'redis'
require 'json'

redis = Redis.new

redis.set 'foo',[1,2,3].to_json
p JSON.parse(redis.get('foo'))

# =&amp;gt; [1,2,3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;순위-정보-다루기&quot;&gt;순위 정보 다루기&lt;/h4&gt;

&lt;p&gt;특정 사용자나 특정 상품이 지금 몇 번째 순위인지 나타내고 싶을 때는 번거롭습니다. 순위 목록을 가져온 후 특정 사용자나 상품이 어디에 있는지 몇 번이고 루프를 돌려서 찾아내는 끈기가 필요합니다.&lt;/p&gt;

&lt;p&gt;반면에 Redis의 정렬된 세트형을 사용하면 간단하고 빠르게 순위 정보를 알 수 있으므로 편리합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'rubygems'
require 'redis'

redis = Redis.new

(1..10).each do |user_id|
		redis.zadd('ranking', rand(100), user_id)
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;redis-commander&quot;&gt;redis-commander&lt;/h5&gt;

&lt;p&gt;Redis안에 실제로는 어떻게 데이터가 존재하는지 확인해보고 싶을때 사용합니다.&lt;/p&gt;

&lt;p&gt;npm 커맨드를 사용할 수 있는 상태라면 다음과 같이 설치가 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum -y install npm 
$ npm install -g redis-commander
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;각-요소의-순위-반환&quot;&gt;각 요소의 순위 반환&lt;/h5&gt;

&lt;p&gt;다음의 코드는 임의의 키 중에서 각 요소의 내림차순 순위를 반환합니다. 순위는 0부터 시작합니다. 가장 스코어가 높은 요소가 0이 되므로 1을 더하고 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'rubygems'
require 'redis'

redis = Redis.new

p redis.zerevrank('ranking', 4) + 1

# =&amp;gt; 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;각-요소의-스코어-반환&quot;&gt;각 요소의 스코어 반환&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'rubygems'
require 'redis'

redis = Redis.new

p redis.zscore('ranking', 4)

# =&amp;gt; 67.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;순위-반환&quot;&gt;순위 반환&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'rubygems'
require 'redis'

redis = Redis.new

p redis.zrevrange('ranking', 0, 9)

# =&amp;gt; [&quot;1&quot;, &quot;2&quot;, &quot;4&quot;, &quot;5&quot;, &quot;7&quot;, &quot;10&quot;, &quot;9&quot;, &quot;3&quot;, &quot;8&quot;, &quot;6&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;순위-갱신&quot;&gt;순위 갱신&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;activities.each do |activity|
	redis.zadd('ranking_tmp', activity.score, activity.user_id)
end
redis.rename('ranking_tmp', 'ranking')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;정렬된 세트형 조작 커맨드&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;커맨드&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;설명&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;zadd&lt;/td&gt;
      &lt;td&gt;각 요소를 등록한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zrevrank&lt;/td&gt;
      &lt;td&gt;각 요소의 순위를 반환한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zscore&lt;/td&gt;
      &lt;td&gt;각 요소의 스코어를 반환한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zrevrange&lt;/td&gt;
      &lt;td&gt;지정한 범위의 요소를 반환한다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;mongodb&quot;&gt;MongoDB&lt;/h3&gt;

&lt;p&gt;MongoDB는 10gen에서 개발한 고성능과 확장성이 특징인 오픈 소스 소프트웨어입니다. 도큐먼트 지향 데이터베이스라고도 합니다.&lt;/p&gt;

&lt;h4 id=&quot;mongodb를-사용하는-이유&quot;&gt;MongoDB를 사용하는 이유&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MongoDB의 장점&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;스키마를 고정하지 않아도 된다&lt;/li&gt;
      &lt;li&gt;검색을 유연하게 할 수 있다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;스키마를-고정하지-않아도-된다&quot;&gt;스키마를 고정하지 않아도 된다&lt;/h5&gt;

&lt;p&gt;MongoDB는 데이터를 저장할 때 데이터 구조를 포함하여 통째로 BSON(JSON을 바이너리화 한 것)형식으로 저장하고, 그 데이터를 특정 키와 연결합니다. 이런 설계 덕분에 스키마를 정의할 필요가 없습니다. 다만, 데이터 처리 방법이 다르므로 표현하는 용어도 다릅니다. 관계형 데이터베이스의 테이블을 MongoDB에서는 컬렉션, 관계형 데이터베이스의 레코드를 MongoDB에서는 도큐먼트라고 합니다.&lt;/p&gt;

&lt;h5 id=&quot;검색을-유연하게-할-수-있다&quot;&gt;검색을 유연하게 할 수 있다&lt;/h5&gt;

&lt;p&gt;스키마는 정의하지 않지만, 임의의 키에서 관계형 데이터베이스처럼 검색도 유연하게 할 수 있습니다. 정규식 표현 검색과 배열 중 특정 값이 포함되어 있는지 다양한 조건으로 검색할 수 있습니다. 이런 검색의 유연성을 MongoDB의 매우 편리한 점입니다.&lt;/p&gt;

&lt;h4 id=&quot;mongodb의-설치&quot;&gt;MongoDB의 설치&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vi /etc/yum.repos.d/mongodb-org-3.0.repo
# 다음 내용으로 저장소를 추가한다
[mongodb-org-3.0]
name=MongoDB Repository
baseurl=http://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.0/x86_64/
gpgcheck=0
enabled=1

# 다음 커맨드로 mongoDB를 설치한다
$ yum -y install mongodb-org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;mongo-셸-사용&quot;&gt;mongo 셸 사용&lt;/h4&gt;

&lt;p&gt;MongoDB를 작동한 상태에서 mongo 커맨드를 실행하면 mongo 셸이 시작합니다. mongo 셸을 사용해서 기본적인 처리를 테스트해봅니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mongo
MongoDB shell version: 3.0.6
connecting to: test # 인수를 지정하지 않으면 test 데이터베이스에 접속한다
Welcome to the MongoDB shell

&amp;gt; show dbs
&amp;gt; local 0.078GB
&amp;gt; show collections
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;데이터를 저장하기&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; db.users.save({name: &quot;yoon&quot;})
WriteResult({ &quot;nInserted&quot; : 1 })
&amp;gt; show dbs
local 0.078GB
test  0.078GB
&amp;gt; show collections
system.indexes
users
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ruby로-mongodb-사용&quot;&gt;Ruby로 MongoDB 사용&lt;/h4&gt;

&lt;p&gt;mongo-ruby-driver gem을 사용해보기&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install mongo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 gem을 사용해서 간단하지만 컬렉션 목록을 표시하고 데이터베이스에 쓰기, 읽기 등 처리를 테스트해보기&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'rubygems'
require 'mongo'

# mydb 데이터베이스에 접속한다
connection = Mongo::Client.new([ '123.0.0.1:222' ], :database =&amp;gt; 'mydb')
db = connection.database

# 아직 이 시점에서는 컬렉션이 없다
p db.collection_names
# =&amp;gt; []


users = db.collection('users')

(201..300).each do |i|
	users.insert_one(name:&quot;yoon&quot;#{i}&quot;)
end

p db.collection_names
# =&amp;gt; [&quot;users&quot;, &quot;system.indexes&quot;]
p users.count
# =&amp;gt; 100

# name이 yoon299인 데이터를 추출한다

users.find(name: 'yoon299').each { |row| p row }
# =&amp;gt; {&quot;_id&quot;=&amp;gt;BSON::ObjectId('2345234534346344'), &quot;name&quot;=&amp;gt;&quot;yoon299&quot;}

# name의 맨 끝이 0인 데이터를 5개 추출한다 
users.find(name: /0$/).limit(5).each { |row| p row }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;로그-기록&quot;&gt;로그 기록&lt;/h4&gt;

&lt;p&gt;사용자 ID와 액세스한 경로, 등록 일시, 액세스 IP를 기록한다고 가정하면, 코드는 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'rubygems'
require 'mongo'

connection = Mongo::Client.new([ '127.0.0.1:1111' ], :database =&amp;gt; 'mydb')
db = connection.database

logs = db.collection('logs')

logs.insert_many([
{user_id: user.id},
{path: '/users/12/books?type=comic'},
{registered_at: user.registered_at}, 
{ip_address: '192.168.33.1'}
])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 24 Dec 2017 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>웹 엔지니어 - PHP</title>
        <link>/blackruby-code/web/2017/12/24/Web2.html</link>
        <guid isPermaLink="true">/blackruby-code/web/2017/12/24/Web2.html</guid>
        <description>&lt;h2 id=&quot;php&quot;&gt;PHP&lt;/h2&gt;

&lt;h3 id=&quot;최근-php&quot;&gt;최근 PHP&lt;/h3&gt;

&lt;p&gt;5.0의 객체 지향 기능 강화, 5.3의 네임 스페이스와 익명 함수, 5.4의 트레이트, 5.5의 제너레이터 지원 등 PHP는 버전이 올라가면서 다양한 기능을 추가하고 있습니다.&lt;/p&gt;

&lt;p&gt;또, 예전부터 보안 문제로 추천하지 않았던 기능, 함수 등은 하위 호환성을 버리면서 개량을 거듭하는 중으로, 예전 스타일의 작성법이나 현재는 권장하지 않는 오래된 정보가 많이 발견됩니다.&lt;/p&gt;

&lt;h3 id=&quot;php-프레임워크&quot;&gt;PHP 프레임워크&lt;/h3&gt;

&lt;h4 id=&quot;풀-스택-프레임워크&quot;&gt;풀 스택 프레임워크&lt;/h4&gt;

&lt;p&gt;풀스택 프레임워크에서는 ORM이나 인증, 템플릿 등 웹 애플리케이션에 필요한 기능을 제공합니다. 주요 풀 스택 프레임워크는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aura&lt;/li&gt;
  &lt;li&gt;CakePHP&lt;/li&gt;
  &lt;li&gt;FuelPHP&lt;/li&gt;
  &lt;li&gt;Laravel&lt;/li&gt;
  &lt;li&gt;Lithium&lt;/li&gt;
  &lt;li&gt;Phalcon&lt;/li&gt;
  &lt;li&gt;Symfony&lt;/li&gt;
  &lt;li&gt;Yii&lt;/li&gt;
  &lt;li&gt;Zend framework&lt;/li&gt;
  &lt;li&gt;CodeIgniter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위의 항목중에서 Symfonu, laravel, phalcon 세 가지 프레임워크가 강력했습니다.&lt;/p&gt;

&lt;h5 id=&quot;symfony&quot;&gt;Symfony&lt;/h5&gt;

&lt;p&gt;Symfony는 2005년부터 개발하여 현재 최신 버전은 2.6입니다. 원래 Ruby on Rails에 영향을 받아 만든 프레임워크였지만, 버전 2에서 설계부터 코드까지 완전히 다른 프레임워크로 다시 태어났습니다. 각 기능을 느슨하게 결합하도록 철저하게 설계되어 있고, 개발자는 프레임워크로 규칙, 제약을 그다지 받지 않은 채 아주 유연하게 개발할 수 있습니다.&lt;/p&gt;

&lt;h5 id=&quot;laravel&quot;&gt;Laravel&lt;/h5&gt;

&lt;p&gt;Laravel(라라벨)은 2012년부터 개발한 비교적 새로운 프레임워크입니다. 해외에서는 2014년 가장 유망한 PHP 프레임워크로 뽑히는 등 상당히 인기가 있습니다.&lt;/p&gt;

&lt;p&gt;Laravel은 앞선 기능을 많이 갖추고 있으며, 프레임워크 방식을 따르기에 Rails처럼 궤도에 오르는 느낌으로 개발할 수 있는 PHP 프레임워크입니다.&lt;/p&gt;

&lt;h5 id=&quot;phalcon&quot;&gt;Phalcon&lt;/h5&gt;

&lt;p&gt;Phalcon(팔콘) 공식 도큐먼트에 나온 것처럼 ‘중요한 것은 성능’이라는 견해를 바탕으로, 다른 프레임워크와는 달리 PHP 확장 모듈을 C언어로 구현했습니다. Phalcon은 PHP를 실행할 때 일어나는 구문 해석, Opcode 변환 단계를 날려 버려 뛰어난 성능과 압도적인 속도를 자랑합니다.&lt;/p&gt;

&lt;h4 id=&quot;마이크로-프레임워크&quot;&gt;마이크로 프레임워크&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Silex&lt;/li&gt;
  &lt;li&gt;Slim&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;풀스택 프레임워크와 달리 기본 기능은 한정되어 있지만 학습 비용이 낮아서 간단한 기능이나 소규모 개발에서는 마이크로 프레임워크를 선택하는 것도 좋은 방법입니다.&lt;/p&gt;

&lt;h3 id=&quot;php-실행-환경-구축&quot;&gt;PHP 실행 환경 구축&lt;/h3&gt;

&lt;h4 id=&quot;php-설치&quot;&gt;PHP 설치&lt;/h4&gt;

&lt;p&gt;rbenv처럼 PHP에도 버전을 관리하는 phpenv, 빌드와 인스톨을 담당하는 php-build 도구가 있으니 이를 사용해서 환경을 구축합니다.&lt;/p&gt;

&lt;p&gt;우선은 가상 머신에 SSH로 로그인합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;PHP 빌드에 필요한 라이브러리를 미리 yum 커맨드로 설치&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum install -y epel-release
$ sudo yum install -y --enablerepo=epel libxml2-devel readline-devel libcurl-
debel libjpeg-turbo-devel libpng-devel libmcrypt-devel libtidy-devel libxslt-devel re2c bison
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;phpenv 설치&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl https://raw.githubusercontent.com/CHH/phpenv/master/bin/phpenv-install.sh | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;phpenv 사용에 필요한 설정을 .bash_profile에 추가하고 설정을 반영합니다&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo 'export PATH=&quot;/home/vargrant/.phpenv/bin:$PATH&quot;' &amp;gt;&amp;gt; ~/.bash_profile
$ echo 'eval &quot;$(phpenv init -)&quot;' &amp;gt;&amp;gt; ~/.bash_profile
$ source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;phpenv 버전의 확인&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;phpenv -v 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;configure 옵션을 변경하지 않고, php-build의 기본 configure로 설치를 진행합니다.&lt;/p&gt;

&lt;p&gt;PHP 5.6.13의 설치&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ phpenv install 5.6.13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치된 PHP버전 목록 확인&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;phpenv versions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;기본 버전의 지정&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;phpenv install 5.6.13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;php 커맨드의 사용&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ php -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;phpini-설정&quot;&gt;php.ini 설정&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~/.phpenv/versions/5.6.13/etc
$ cp php.ini php.ini.old # 원본 파일 백업
$ vi php.ini # php.ini 수정

# 다음 변경된 부분을 참고하여 수정한다

$ git diff --no-index php.ini.old php.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;composer-사용&quot;&gt;Composer 사용&lt;/h3&gt;

&lt;p&gt;Composer는 PHP 프로젝트의 의존관계를 관리하는 도구입니다. 프로젝트에 필요한 라이브러리의 이름과 버전을 정의하면, 다운로드부터 설치, 버전 관리, 클래스 자동 로딩 문제를 해결합니다.&lt;/p&gt;

&lt;h4 id=&quot;composer-설치&quot;&gt;Composer 설치&lt;/h4&gt;

&lt;p&gt;Composer를 사용함녀 프로젝트에 필요한 라이브러리를 관리할 수 있고, PHP 개발 전반에 사용하는 커맨드라인 도구 등 라이브러리도 설치할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;psr-알아보기&quot;&gt;PSR 알아보기&lt;/h3&gt;

&lt;p&gt;PHP로 개발할 때 지켜야 할 규약으로 PSR(PHP Standard Recommendations)이 있습니다. PSR은 PHP의 다양한 프레임워크와 라이브러리 개발 커뮤니티인 PHP-FIG(PHP Framework interop Group)가 참여하여 제창한 표준 가이드라인입니다. 현재 PSR-0~PSR-4까지 공개되어 있습니다.&lt;/p&gt;

&lt;p&gt;PSR은 이름 규칙과 디렉터리 구조, 코딩 스타일 같은 작성법을 비롯하여 로거처럼 필수적이고. 중요한 기능의 인터페이스 정의도 포함하여 표준화를 진행합니다.&lt;/p&gt;

&lt;h3 id=&quot;php-애플리케이션-개발-환경-구축&quot;&gt;PHP 애플리케이션 개발 환경 구축&lt;/h3&gt;

&lt;h4 id=&quot;프로젝트-만들기&quot;&gt;프로젝트 만들기&lt;/h4&gt;

&lt;p&gt;Composer를 사용하여 Silex를 설치할 수 있습니다. ‘/vagrant’ 디렉터리를 프로젝트 루트로 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Composer.json에 라이브러리 정보를 기술합니다. require 부분에는 패키지 이름과 버전을 지정합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ 
	&quot;require&quot; : {
		&quot;silex/silex&quot;: &quot;~1.2&quot;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;composer install을 실행하면 composer.json의 내용을 바탕으로 Silex가 의존하는 모듈을 다운로드하기 시작합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ composer install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치가 끝나면 composer.lock 파일을 만들고, vendor 디렉터리 아래에는 설치한 라이브러리를 저장합니다.&lt;/p&gt;

&lt;p&gt;Git 등으로 애플리케이션 버전을 관리할 때는 composer.json, composer.lock 파일 모두 커밋하도록 합니다. composer.lock 파일이 없으면 자신의 로컬 환경과 다른 팀 멤버의 환경, 실제 서비스 환경에서 설치하는 라이브러리 버전이 다를 수 있으므로 반드시 커밋.&lt;/p&gt;

&lt;p&gt;Silex 매뉴얼에 있는 ‘Hello World’ 애플리케이션을 만들어 보자. 시작할 때 Composer가 생성한 ‘vendor/autoload.php’를 제일 먼저 읽어 들여 라이브러리를 자동으로 로딩 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/vendor/autoload.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Silex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/hello/{name]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;escape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PHP_EOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;api-만들기&quot;&gt;API 만들기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 요청한 IP 주소를 반환한다
$ curl -s http://httpbin.org/ip

# 요청한 사용자 에이전트를 반환한다
$ curl -s http://httpbin.org/user-agent

# GET 요청에 HTTP 헤더, 요청 파라미터를 반환한다
$ curl -s 'http://httpbin.org/get?foo=bar&amp;amp;baz=qux'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Componet\HttpFoundation\Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/vendor/autoload.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Silex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/ip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
		&lt;span class=&quot;s1&quot;&gt;'origin'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClientIp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/user-agent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fuction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
		&lt;span class=&quot;s1&quot;&gt;'user-agent'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'User-Agent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/get'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//헤더의 키를 '-'로 구분해 대문자로, user-agent -&amp;gt; User-Agent&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;preg_replace_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/\w+/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ucfirst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
		&lt;span class=&quot;s1&quot;&gt;'args'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
		&lt;span class=&quot;s1&quot;&gt;'headers'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;s1&quot;&gt;'origin'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClientIp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
		&lt;span class=&quot;s1&quot;&gt;'user-agent'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'User-Agent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;개발에-편리한-도구&quot;&gt;개발에 편리한 도구&lt;/h3&gt;

&lt;h4 id=&quot;repl&quot;&gt;REPL&lt;/h4&gt;

&lt;p&gt;Ruby의 Pry와 같은 REPL은 PHP에서는 그다지 활발하게 사용하지 않는 것 같습니다. php -a 옵션으로도 대화식 모드를 이용하여 PHP를 실행할 수 있지만, 아주 간단한 기능만 제공하므로 기능이 풍부한 PsySH를 도입해서 사용해보자.&lt;/p&gt;

&lt;p&gt;PsySH는 composer를 사용해서 환경 전체에 설치할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ composer global require psy/psysh:@stable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치를 완료하면 psysh 커맨드로 Psy 셸을 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ psysh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;’~/.psysh’ 아레에 사전 파일을 저장하면, PsySH 안에서 PHP 메뉴얼을 참조할 수 있습니다. 사전 파일은 다음과 같이 설치한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -O http://psysh.org/manual/en/php_manual.sqlite
$ mkdir ~/.psysh
$ mv php_manual.sqlite ~/.psysh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 ‘doc 함수 이름’으로 PHP 메뉴얼의 함수 정의를 참조할 수 있습니다. 다시 한 번 doc 커맨드를 테스트하는 명령어.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ psysh

&amp;gt;&amp;gt;&amp;gt; $d = new Datetime
...
&amp;gt;&amp;gt;&amp;gt; doc $d-&amp;gt;getOffser
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;PsySH를 시작할 때 autoload 파일을 지정하면, PsySH 안에서 프로젝트에서 이용하는 라이브러리에도 액세스할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /vendor
$ psysh vendor/autoload.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;index.php 소스 코드에서 /get 시작 부분에 다음처럼 브레이크 포인트를 삽입한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\HttpFoundation\Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;중략&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/get'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 브레이크 포인트 &lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;\Psy\Shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get_defined_vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
	
	&lt;span class=&quot;c1&quot;&gt;// 헤더의 키를 '-'로 구분하여 대문자로, user-agent -&amp;gt; User-Agent&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;$headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
	
	&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;중략&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;호스트 운영체제에서 HTTP 요청을 보내면, PHP 빌트인 웹 서버를 실행한 콘솔에서 PsySH를 시작한다.&lt;/p&gt;

&lt;h4 id=&quot;코딩-규칙-점검-분석&quot;&gt;코딩 규칙 점검, 분석&lt;/h4&gt;

&lt;p&gt;PHP Coding Standards Fixer는 PSR-0~2와 Symfony 코딩 규칙 등을 따르는지 분석하고, 규칙을 따르지 않는 코드를 수정합니다.&lt;/p&gt;

&lt;p&gt;Composer로 설치할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ composer global require fabpot/php-cs-fixer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;앞서 소개한 API를 PSR 규칙에 반하도록 수정해본다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PHP의 예약어를 대문자로 지정한다.&lt;/li&gt;
  &lt;li&gt;함수 정의 사이의 공백을 없앤다.&lt;/li&gt;
  &lt;li&gt;함수 이름과 () 사이에 공백을 넣는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Symfony\Component\HttpFoundation\Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__DIR__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/vendor/autoload.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NEW&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Silex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	
&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/ip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
		&lt;span class=&quot;s1&quot;&gt;'origin'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClientIp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;php-cs-fixer는 기본적으로 Symfony의 코딩 규약으로 검사한다. 변경사항을 표시하려고 diff 옵션을 지정하고, 검사할 수준은 PSR-2로 지정하여 실행한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ php-cs-fixer fix index.php --diff --level=psr2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;나머지-도구&quot;&gt;나머지 도구&lt;/h4&gt;

&lt;p&gt;이외에도 PHP 개발에는 Git의 커밋 전에 훅을 호출하거나 CI와 연계하면 편리한 정적 분석 도구가 있습니다.&lt;/p&gt;

&lt;h5 id=&quot;phpmd&quot;&gt;PHPMD&lt;/h5&gt;

&lt;p&gt;PHPMD는 정적으로 코드를 분석하여 거대한 클래스와 함수 등 복잡하고 버그가 생기기 쉬운 곳이나 개선하는 편이 나은 곳을 탐지하여 보고합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ composer global require phpmd/phpmd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;phploc&quot;&gt;PHPLOC&lt;/h5&gt;

&lt;p&gt;PHPLOC는 코드의 행 개수나 클래스, 함수의 개수 등 프로젝트의 구성을 분석합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ composer global require 'phploc/phploc=*'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;phpcpd&quot;&gt;PHPCPD&lt;/h5&gt;

&lt;p&gt;PHPCPD는 복사하여 붙여 넣은 코드를 찾아서 보고합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ composer global require 'sebastian/phpcpd=*'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;정리&quot;&gt;정리&lt;/h3&gt;

&lt;p&gt;Facebook이 HHVM이라는 PHP 실행 환경과 HHVM에서 동작하는 PHP 확장 언어인 Hack을 개발 중이다.&lt;/p&gt;

&lt;p&gt;HHVM에서 동작하는 Hack은 PHP에 없는 다음과 같은 강력한 기능을 추가하면서 기존 PHP 코드와 공존하여 동작시킬 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;정적 타입&lt;/li&gt;
  &lt;li&gt;제네릭스&lt;/li&gt;
  &lt;li&gt;비동기 처리&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 24 Dec 2017 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>웹 엔지니어 - Ruby on Rails</title>
        <link>/blackruby-code/web/2017/12/23/Web1.html</link>
        <guid isPermaLink="true">/blackruby-code/web/2017/12/23/Web1.html</guid>
        <description>&lt;h2 id=&quot;ruby-on-rails로-개발&quot;&gt;Ruby on Rails로 개발&lt;/h2&gt;

&lt;h3 id=&quot;ruby의-개요&quot;&gt;Ruby의 개요&lt;/h3&gt;

&lt;p&gt;Ruby는 마츠모토 유키히로(통칭 Matz)가 개발한 일본산 객체 지향 프로그래밍 언어입니다. Smalltalk, Lisp, Perl, Python 등 다양한 언어에서 영향을 받아 1993년에 태어났습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;루비의 배열&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;list = [1, 'hi', 3.14, 1, 2]

puts list[2] # 3.14
puts list.reverse # [2, 1, 3.14, 'hi', 1]

puts list.class # Array
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;루비의 해시&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hash = { foo: 1, bar: 2 }
puts hash[:foo] # 1

hash.each do |key, value|
	puts &quot;#{key} : #{value}&quot;
end

# foo : 1
# bar : 2

puts hash.class # Hash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ruby-on-rails의-등장&quot;&gt;Ruby on Rails의 등장&lt;/h3&gt;

&lt;p&gt;Rails는 애플리케이션 개발을 위한 라이브러리는 물론, 코드를 생성하는 도구의 동작을 확인하는 서버 등을 하나로 모은 풀 스택 프레임워크라는 특징이 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;rails의-기본-이념&quot;&gt;Rails의 기본 이념&lt;/h4&gt;

&lt;p&gt;Rails의 기본 이념은 다음 두가지 입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;같은 일을 반복하지 않는다.&lt;/li&gt;
  &lt;li&gt;설정보다 규약이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;각각을 좀 더 자세하게 알아보겠습니다.&lt;/p&gt;

&lt;h5 id=&quot;같은-일을-반복하지-않는다&quot;&gt;같은 일을 반복하지 않는다.&lt;/h5&gt;

&lt;p&gt;같은 코드나 설정을 여기저에 쓰지 않게 해서 전체 가독성을 높이고 유지 보수도 쉽게 하자는 발상입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;예를 들어, Rails에서는 DB의 스키마 정의를 설정 파일 등에 기술할 필요가 없습니다. DB에 테이블을 작성하기만 하면, 나머지는 Rails가 스키마 정의를 인식하여 임의의 칼럼에 액세스하는 메소드를 준비합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;설정보다-규약이다&quot;&gt;설정보다 규약이다.&lt;/h5&gt;

&lt;p&gt;신중히 설계된 규약을 따라서 설정을 불필요하게 하거나 가볍게 한다는 발상입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;예를 들어, users 테이블이 있다면 모델은 User 모델에 자동으로 대응하는 등 Rails 스타일의 규약이 있습니다. 어떤 의미에서는 개발자에게 규약을 따를 것을 강제하는 것이지만, 그 결과로 테이블과 모델의 맵핑을 직접 명시할 필요가 없고 생산성이 높아집니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;restful-api의-설계&quot;&gt;RESTful API의 설계&lt;/h4&gt;

&lt;p&gt;REST는 애플리케이션을 설계하는 방법 중 하나입니다. 조작 대상 리소스를 URL로 나타내고, HTTP 메소드인 GET, POST, DELETE, PUT을 사용하여 URL을 조작하는 방법입니다. 어떤 URL에 GET으로 액세스하면 결과를 목록으로 가져올 수 있고, 같은 URL에 POST로 액세스하면 새로 만들 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;mvcmodel---view---controller&quot;&gt;MVC(Model - View - Controller)&lt;/h3&gt;

&lt;p&gt;Rails를 비롯한 요즘 웹 애플리케이션 프레임워크는 대부분 MVC 아키텍쳐를 사용합니다.&lt;/p&gt;

&lt;h4 id=&quot;모델&quot;&gt;모델&lt;/h4&gt;

&lt;p&gt;먼저 모델입니다. 모델에서는 애플리케이션의 비즈니스 로직을 다룹니다. 데이터 입수와 저장 등을 담당하지만, 어떻게 표시할지는 뷰가 담당하므로 모델의 책임은 아닙니다. 어디까지나 데이터 처리만 담당합니다.&lt;/p&gt;

&lt;h4 id=&quot;뷰&quot;&gt;뷰&lt;/h4&gt;

&lt;p&gt;다음은 뷰 입니다. 뷰는 모델에서 받은 데이터를 적절히 가공해서 표시합니다. 보통은 데이터를 HTML 형식으로 반환하지만, API 서버에서는 데이터를 JSON 형식으로 출력하기도 합니다. 이것이 뷰의 역할입니다.&lt;/p&gt;

&lt;h4 id=&quot;컨트롤러&quot;&gt;컨트롤러&lt;/h4&gt;

&lt;p&gt;마지막으로 컨트롤러 입니다. 컨트롤러는 브라우저나 커맨드라인의 요청을 받아 모델에 처리를 할당하고, 결과를 뷰에 전달합니다. 축구에서 말하는 사령탑과 역할이 같습니다. 컨트롤러는 편리한 존재로 임의의 처리를 기술할 수 있습니다. 하지만 뭐든지 다 컨트롤러에 적어 넣으면 이른바 Fat Controller 상태가 되므로 좋지 않습니다.&lt;/p&gt;

&lt;h4 id=&quot;concerns-디렉터리&quot;&gt;Concerns 디렉터리&lt;/h4&gt;

&lt;p&gt;컨트롤러에 처리를 기술하지 않고 모델에 모아 두면(Skinny Controller, Fat Model) 이번에는 모델 쪽 코드양이 늘어나서 보기에 좋지 않습니다. 이런 문제를 해결하고자 Rails4.0 부터는 Mixin용 모듈을 설치하는 디렉터리를 제공합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;app/models/concerns&lt;/li&gt;
  &lt;li&gt;app/controllers/concerns&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다수의 모델과 컨트롤러에서 공통된 처리는 모듈로 나눠 Concerns 디렉터리에 저장하세요. 이곳에 처리를 나누고 Mixin으로 모델이나 컨트롤러에서 사용하는 형태로 정리하면 보기 좋습니다.&lt;/p&gt;

&lt;h3 id=&quot;rails로-애플리케이션-개발&quot;&gt;Rails로 애플리케이션 개발&lt;/h3&gt;

&lt;h4 id=&quot;rails-개발-환경-준비&quot;&gt;Rails 개발 환경 준비&lt;/h4&gt;

&lt;p&gt;직접 Ruby나 Rails를 설치해도 되지만, 여기서는 rbenv Ruby 버전을 관리할 수 있는 도구를 사용하여 개발 환경을 준비합니다.&lt;/p&gt;

&lt;h5 id=&quot;rbenv&quot;&gt;rbenv&lt;/h5&gt;

&lt;p&gt;rbenv는 다양한 버전의 Ruby를 관리하는 도구입니다. 예를 들어, 다음처럼 요구한다고 합시다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;새로운 버전의 Ruby를 사용하고 싶다.&lt;/li&gt;
  &lt;li&gt;오래된 버전의 Ruby에서 동작을 확인하고 싶다.&lt;/li&gt;
  &lt;li&gt;애플리케이션별로 Ruby 버전을 변경하고 싶다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;요구마다 다른 버전의 Ruby를 설치하고 경로를 설정해야 한다면 아주 번거롭고 시간도 많이 걸립니다. 이때 rbenv를 사용해서 Ruby를 설치하면 쉽게 버전을 전환할 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음처럼 rbenv를 사용하면 Ruby 버전을 전환할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rbenv global 2.1.5 # 항상 2.1.5를 사용한다
$ rbenv local 1.9.3 # 이 디렉터리 아래에서는 1.9.3을 사용한다
$ rbenv shell 1.8.7 # 현재 셸에서는 1.8.7을 사용한다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;ruby-설치하기&quot;&gt;Ruby 설치하기&lt;/h5&gt;

&lt;p&gt;먼저 필요한 라이브러리를 설치해야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo yum -y update &amp;amp;&amp;amp; sudo yum -y install git gcc openssl-devel libyaml-devel readline-devel 
zlib-devel splite-devel glibc-devel libffi-devel libxml2 libxslt libxml2-devel lixslt-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음으로 git clone 하여 rbenv를 설치 합니다.&lt;/p&gt;

&lt;p&gt;마지막으로 rbenv 설정을 ‘.bash_profile’에 추가하고 설정을 반영합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo 'export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;' &amp;gt;&amp;gt; ~/.bash_profile
$ echo 'eval &quot;$(rbenv init -)&quot;' &amp;gt;&amp;gt; ~/.bash_profile
$ source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;rails-다루기&quot;&gt;Rails 다루기&lt;/h4&gt;

&lt;p&gt;먼저 Rails를 설치합니다. Ruby 라이브러리는 RubyGems 사이트에 gem으로 저장되어 있습니다. 이 gem들을 설치하는 커맨드가 바로 gem install입니다. Rails에서는 의존 라이브러리가 많으므로 설치에 조금 시간이 걸립니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ gem install rails --no-ri --no-rdoc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이번에는 만들 애플리케이션의 원형을 생성합니다. 이름은 아무것이나 상관없습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails 아무이름 -B -T
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;rails new 커맨드의 주요 옵션&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;옵션&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;단축 옵션&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;설명&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--skip-bundle&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-B&lt;/td&gt;
      &lt;td&gt;bundle install 커맨드를 실행하지 않는다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--skip-test-unit&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-T&lt;/td&gt;
      &lt;td&gt;Test::Unit 파일을 만들지 않는다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--database=DATABASE&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;-d&lt;/td&gt;
      &lt;td&gt;이용할 데이터베이스를 지정한다.&lt;br /&gt;(mysql, oracle, postgresql, sqlite3 등, 기본은 sqlite3)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Gemfile 파일에는 이 애플리케이션에서 사용할 gem 라이브러리가 기술되어 있습니다. Gemfile에는 therubyracer행이 주석으로 처리되어 있으므로 주석을 풀어주세요. therubyracer는 JavaScript 엔진인 v8을 Ruby에서 사용할 수 있게 하는 gem 입니다.&lt;/p&gt;

&lt;p&gt;bundle install 커맨드를 실행하면 Gemfile에 기술된 gem 라이브러리를 실행합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vi Gemfile

-- Gemfile 내용 중 --
# gem 'therubyracer', platforms: :ruby
# 다음처럼 수정하고 [:wq]로 저장한다
gem 'therubyracer', platforms: :ruby

$ bundle install --path vendor/bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;vendor/bundler 아래에 각 gem 라이브러리가 설치되었습니다. 이 상태에서 rails server 커맨드로 테스트 서버를 시작하면, 3000번 포트로 애플리케이션에 액세스할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails server 
...
...

# 다음처럼 IP와 Port를 지정하여 시작할 수도 있다
$ rails s -p 3000 -b 192.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;지금은 Rails의 기본 톱페이지를 표시했습니다. 우선은 이 페이지를 독자적인 톱페이지로 변경해야 합니다.&lt;/p&gt;

&lt;p&gt;처음에는 rails generate controller 커맨드로 톱페이지용 컨트롤러를 작성합니다. 다음처럼 실행하면 ‘top’ 컨트롤러를 만들어 그 안에 index 액션을 정의 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails generate controller top index
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;계속해서 config/routes.rb를 편집하여 톱페이지에 액세스할 때 이 ‘top’ 컨트롤러의 index 액션을 호출하도록 설정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rails.application.routes.draw do
	root 'top#index'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 http://localhost:3000에 접속하면 조금 전에 만든 ‘top’ 컨트롤러의 index 액션을 호출합니다.&lt;/p&gt;

&lt;p&gt;‘rails generate xxx’ 커맨드로 만든 일련의 파일은 ‘rails destroy xxx’커맨드로 삭제할 수 있으니 기억해두자.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails destroy controller top index
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;oauth-인증-사용&quot;&gt;OAuth 인증 사용&lt;/h4&gt;

&lt;p&gt;Facebook 피드나 GitHub 액티비티 목록을 작성 중인 애플리케이션에 표시하거나 Facebook이나 GitHub 계정을 사용하여 작성 중인 애플리케이션에 로그인하는 처리를 생각해보겠습니다. 이때는 OAuth 인증을 사용하면 좋습니다.&lt;/p&gt;

&lt;p&gt;OAuth 인증을 사용하지 않고 이런 처리를 구현하려면, Facebook이나 GitHub ID와 패스워드를 애플리케이션에서 입력 받아야만 합니다. 물론, 그렇게 해도 구현할 수는 있습니다. 하지만 애플리케이션 운영자가 사용자의 ID와 패스워드를 알 수 있으므로 나쁜 의도로 도용하는 등 위험이 있습니다.&lt;/p&gt;

&lt;p&gt;이 문제를 해결하려고 제안한 것이 OAuth 인증입니다. 이것은 대상 사이트에서 토큰을 받아서 일정한 조작을 사용자 대신 할 수 있게 하는 구조 입니다. 어떤 조작을 허가할지 제한할 수 있고, 최소한의 조작만 애플리케이션에 허락하므로 안전합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://wiki.scn.sap.com/wiki/download/attachments/328468210/scenario.png?version=2&amp;amp;modificationDate=1366895529000&amp;amp;api=v2&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;oauth-인증-구현&quot;&gt;OAuth 인증 구현&lt;/h4&gt;

&lt;p&gt;OAuth 인증은 devise와 omniauth라는 gem을 사용하여 구현합니다. Gemfile에 필요한 gem을 추가하고  bundle install 커맨드를 실행합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gemfile에 추가할 내용&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gem ‘devise’&lt;/li&gt;
  &lt;li&gt;gem ‘omniauth-facebook’&lt;/li&gt;
  &lt;li&gt;gem ‘omniauth-github’&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;필요한 파일을 추가로 설치&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle install --path vendor/bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;devise의 초기 설정&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rails generate devise:install 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 User 모델을 만들고, 그곳에서 사용자를 관리합니다. provider, uid, name, token은 OAuth 인증에서 사용할 컬럼이 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails generate devise user provider:string uid:string name:string token:string
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;rake db:migrate 커맨드로 migration 파일을 실행하고 users 테이블을 작성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle exec rake db:migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또, User 모델에서 ‘omniauthable’ 모듈을 추가합니다. devise에서는 기능이 모듈 단위로 나눠 있어 사용하고 싶은 모듈만 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class User &amp;lt; ActiveRecord::Base
	devise :database_authenticatable, :registerable,
		:recoverable, :rememberable, :trackable, :omniauthable
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;라우팅을 확인하면 다양한 라우팅이 자동으로 설정되어 있습니다. rake를 bundler로 설치했기 때문에 커맨드 앞에 ‘bundle exec’를 붙여야 하므로 주의해야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ bundle exec rake routes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;라우팅이 많아 복잡하게 보이지만, OAuth 인증에 주로 관계된 것은 /users/auth/:provider와 /users/auth/:action/callback 2개 뿐입니다.&lt;/p&gt;

&lt;p&gt;OAuth 인증은 먼저 /user/auth/:provider에 액세스하면, ‘OAuth Server’로 리디렉션하는 과정으로 진행합니다. 예를 들어, Facebook은 URL로 리디렉션 됩니다.&lt;/p&gt;

&lt;p&gt;app/views/top/index.html.erb를 변경하고 OAuth 인증용 링크를 준비합니다.&lt;/p&gt;

&lt;p&gt;나머지는 사전에 작성 중인 애플리케이션을 OAuth Client로서 등록해야 합니다. 이것은 OAuth 인증을 할 수 있는 OAuth Client를 제한하기 위함입니다.&lt;/p&gt;

&lt;p&gt;Facebook과 GitHub는 앱을 등록하기 위해서 ID와 Secret라는 값이 필요합니다.&lt;/p&gt;

&lt;p&gt;취득한 해당값을 config/initializers/devise.rb에 설정합니다. 	
로그인 인증용 gem인 devise의 secret key를 설정하지 않았다는 오류를 표시하면, 오류 메세지에 포함된 키를 복사해서 secret_key를 지정하거나 rake secret 커맨드를 생성하여 지정할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vi config/initializers/devise.rb
require 'devise'
# User this hook to configure devise mailer, warden hooks and so forth.
#Many of these configuration options can be set straight in your model.
Devise.setup do |config|
# 추가
config.secret_key = '생성된 키'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;파라미터로 client_id를 전달하면, 이 값으로 등록된 OAuth Client인지 확인하여 어느 OAuth Client의 요청인지 판별합니다.&lt;/p&gt;

&lt;p&gt;한 번 인증하면 다음부터는 인증 페이지를 표시하지 않습니다. OAuth Server 쪽에서 인증된 애플리케이션으로 등록되어 있기 때문입니다. 인증된 애플리케이션 페이지에서 해당 애플리케이션을 삭제하면, 다시 인증 페이지를 표시합니다.&lt;/p&gt;

&lt;p&gt;인증을 마치면 다시 애플리케이션으로 돌아옵니다. 이때 URL의 라우팅이 ‘/users/auth/:action/callback’이 됩니다.&lt;/p&gt;

&lt;p&gt;콜백 URL로 돌아왔을 때 처리가 아직 없으므로 구현해 보면, 우선 ‘config/routes.rb’에서 콜백 처리를 ‘app/controllers/users/omniauth_callbacks_controller.rb’에서 받도록 합니다.&lt;/p&gt;

&lt;p&gt;‘app/controllers/users/omniauth_callbacks_controller.rb’에서는 콜백 URL을 받아들여 Facebook으로 인증할 때는 Facebook 메소드가, GitHub 계정으로 인증 할 때는 github 메소드가 처리를 담당합니다.&lt;/p&gt;

&lt;p&gt;데이터는 request.env[‘omniauth.auth’]로 받을 수 있으므로 값을 단순히 저장합니다.&lt;/p&gt;

&lt;p&gt;그런 다음, 다음의 커맨드를 실행하면 데이터가 등록된 것을 확인 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails db
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;gists-목록-가져오기&quot;&gt;Gists 목록 가져오기&lt;/h4&gt;

&lt;p&gt;우선 octokit와 httparty gem을 Gemfile에 추가하고, bundle install 커맨드로 설치합니다. 이 gem을 사용해서 GitHub의 API를 호출합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem 'octokit', '~&amp;gt; 3.0'
gem 'httparty'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인증에 성공하면 Gists 목록을 그대로 가져옵니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Users::OmniauthCallbacksController &amp;lt; Devise::OmniauthCallbacksController
	def facebook
		# facebook으로 인증할 때 callback 처리는 이곳에 기술한다
	end
	
	def github
		auth = request.env['omniauth.auth']
		@user User.find_by_provider_and_uid(auth['provider'], auth['uid']) ||
			   User.create_with_omniauth(auth)
			   
	   octokit = Octokit::Client.new(access_token: @user.token)
	   octokit.gitst.each do |gist|
	   	unless Snippet.find_by(gist_id: gist[:id])
	   		gist[:files].to_hash.each do |filename, gist_info|
	   			language = gist[:files][filename][:language]
	   			response = HTTParty.get(gist[:files][filename][:raw_url])
	   			
	   			snippet = Snippet.create(
	   				gist_id: gist[:id],
	   				gist_url: gist[:html_url],
	   				language: language.try(:downcase),
	   				plain_code: response.force_encoding('utf-8'),
	   				user: @user
   				)
			end
		end
	end
	
	sign_in_and_redirect @user, event: :authentication
end

end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;snippets 컨트롤러를 만들어 Gists 목록을 표시해 보겠습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rails generate controller snippets index
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이어서 Snippet 모델을 준비하고 오리지널 코드를 보존하는 plain_code 칼럼과 신택스 하이라이트된 코드를 저장하는 highlighted_code 칼럼을 준비합니다. Gitsts의 ID와 URL을 저장하는 칼럼도 만들어 두면 편리합니다.&lt;/p&gt;

&lt;h4 id=&quot;비동기-처리&quot;&gt;비동기 처리&lt;/h4&gt;

&lt;p&gt;이대로면 코드의 신택스 하이라이트가 없어서 보기에 불편합니다. 다음으로 코드의 신택스 하이라이트를 생각합니다. 코드의 신책스 하이라이트는 Pygments라는 외부 서비스를 이용하기로 합니다. Pygments API에 코드와 언어 종류를 POST 방식으로 전송합니다.&lt;/p&gt;

&lt;p&gt;하지만 실제로 Pygments API를 사용할 때는 스니펫마다 5~6초 정도 기다려야 합니다. 또, Pygments API가 다운되면 응답이 돌아오지 않으므로 아무리 기다려도 화면이 나타나지 않을 수 있습니다.&lt;/p&gt;

&lt;p&gt;이 문제를 피하려고 이번에는 Pygments API 호출을 비동기 처리로 하겠습니다. 비동기 처리를 하는 라이브러리로 sidekiq이라는 gem을 사용합니다.&lt;/p&gt;

&lt;p&gt;Gemfile에 sidekiq을 추가하고 bundle install 커맨드를 실행&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem 'sidekiq'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;비동기 처리는 app/workers 디렉터리 아래에 저장합니다. app/workers 디렉터리를 새로 만들고, 그 안에 pygments_worker.rb를 작성합니다. app/workers 디렉터리 아래에 저장하면 애플리케이션에 자동으로 로드 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class PygmentsWorker
	include Sidekiq::Worker
	
	def perform(snippet_id)
		snippet = Snippet.find(snippet_id)
		uri = URI.parse('http://pygments.slmplabs.com/')
		request = Net::HTTP.post_form(uri, {lang: snippet.language, code: snippet.plain_code})
		snippet.update(highlighted_code: request.body}
	end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 비동기 처리를 실현했습니다. highlighted_code가 nil일 때만 PygmentsWorker를 호출하고, 비동기 처리로 큐에 등록합니다. 그 결과, 순식간에 페이지 응답이 돌아오도록 개선했습니다.&lt;/p&gt;

&lt;h3 id=&quot;테스트하기&quot;&gt;테스트하기&lt;/h3&gt;

&lt;p&gt;동작을 보증하는 테스트도 중요한데, 이번에는 RSpec gem을 사용하여 테스트를 실행합니다. 우선 Gemfile에 rspec_rails와 함께 factory_girl_rails라는 gem을 추가합니다. FactoryGirl이란 테스트용 데이터를 간편하게 준비해주는 gem입니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;group :devlopment, :test do
	gem 'rspec-rails', '~&amp;gt;3.1'
	gem 'factory_girl_rails'
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;bundle install 커맨드로 설치하고, 초기화 처리도 합니다.&lt;/p&gt;

&lt;p&gt;이번에는 Devise를 사용하므로, rails_helper.rb 파일에 내용을 추가합니다.&lt;/p&gt;

&lt;h4 id=&quot;테스트-데이터의-통합-관리&quot;&gt;테스트 데이터의 통합 관리&lt;/h4&gt;

&lt;p&gt;테스트하기 전에 먼저 테스트 데이터를 준비하고 싶을 수도 있습니다. 물론, 테스트 중에도 ActiveRecord를 사용해서 테스트 데이터를 등록할 수 있습니다. 하지만 여러 테스트 케이스에서 같은 데이터를 사용할 때가 자주 있으므로, 테스트 데이터의 정의를 어딘가에서 통합해서 관리하고 싶을 것 입니다. 이때 FactoryGirl을 사용하면 테스트 데이터를 통합해서 관리할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;시간관련-테스트&quot;&gt;시간관련 테스트&lt;/h4&gt;

&lt;p&gt;다음처럼 Helper를 작성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module DateHelper
	def date_format(date)
		date.strtime(&quot;%Y년%m월%d일입니다&quot;)	
	end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 테스트는 9월 15일에 실행하면 성공하지만, 9월 16일에 실행하면 실패합니다.&lt;/p&gt;

&lt;p&gt;이때는 다음처럼 오늘이 아니라 특정 일자를 넘겨주는 방법이 좋지만, 여기서는 timecop이라는 gem을 사용해서 대처해 보겠습니다.&lt;/p&gt;

&lt;p&gt;우선 Gemfile에 gem ‘timecop’를 추가하고 bundle install 커맨드로 설치합니다. timecop은 테스트에서 시간을 다룰 때 사용할 수 있는 편리한 gem으로, Timecop, freeze나 Timecop.travel등 커맨드로 테스트 중 시간을 임의로 설정할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;목과-스텁-활용&quot;&gt;목과 스텁 활용&lt;/h4&gt;

&lt;p&gt;테스트를 작성할 때 빠뜨릴 수 없는 것이 목과 스텁의 존재입니다. 예를 들어, 모델과 API 등을 아직 구현하지 않아 테스트를 작성하려 해도 할 수 없을 때가 있습니다. 이때 테스트를 작성할 수 있게 하는 편리한 장치가 목과 스텁입니다. 용도에 따라 종류는 다음과 같습니다.&lt;/p&gt;

&lt;h5 id=&quot;double&quot;&gt;double&lt;/h5&gt;

&lt;p&gt;double을 사용하면 ‘더미 오브젝트’를 작성할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 더미 오브젝틀르 만든다. 
# 제1인수는 생략할 수 있지만, 오류가 발생하면 표시되므로 입력하면 좋다 
book = double('book')

# book.title을 호출하면 'karaage Book?'이 돌아오는 더미 오브젝트
book = double('book', title: 'karaage Book?')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;stub&quot;&gt;stub&lt;/h5&gt;

&lt;p&gt;stub를 사용하면 ‘더미 메소드’를 작성할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 모두 book.title을 호출하면 'karaage Book?'을 반환하는 더미 메소드
book.stub(:title) {'karaage Book?'}
book.stub(&quot;title =&amp;gt; 'karaage Book?')
book.stub(:title).and_return('karaage Book?')

#double로 만든 더미 오브젝트가 아니더라도 더미 메소드는 정의할 수 있다. 
String.stub(:test).and_return('test')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;mock&quot;&gt;mock&lt;/h5&gt;

&lt;p&gt;mock을 사용하면 메소드의 행동을 평가하는 ‘더미 오브젝트’를 작성할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Book.should_receive(:find).with(:all).and_return([book])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;편리한-gem-소개&quot;&gt;편리한 gem 소개&lt;/h3&gt;

&lt;p&gt;Rails로 개발할 때 알아 두면 편리한 gem이 여럿 있습니다. 여기서는 이 편리한 gem의 일부를 소개합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pry&lt;/li&gt;
  &lt;li&gt;Better Errors&lt;/li&gt;
  &lt;li&gt;MailCather&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pry&quot;&gt;Pry&lt;/h4&gt;

&lt;p&gt;Ruby에서 메소드의 움직임을 조사하거나 간단한 예제 코드를 실행할 때 편리한 것이 irb입니다. irb는 interactive ruby의 준말로, Ruby를 설치한 환경에서 사용할 수 있는 REPL(대화형 실행 환경)입니다.&lt;/p&gt;

&lt;h4 id=&quot;better-errors&quot;&gt;Better Errors&lt;/h4&gt;

&lt;p&gt;Better Errors를 사용하면 오류가 발생했을 때 화면에 손쉽게 보여 줍니다. 게다가 binding_of_caller라는 gem을 함께 사용하면 브라우저상에서 디버그할 수도 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;mailcatcher&quot;&gt;MailCatcher&lt;/h4&gt;

&lt;p&gt;애플리케이션을 개발하다 보면 메일을 전송해야 할 때가 많습니다. 개발 중에 메일이 제대로 전송하는지 확인하고 싶지만, 일부러 개발용 메일 전송 환경을 만들기가 번거롭습니다. 또 잘못해서 테스트 메일을 실제 사용자에게 전송한다면 큰일이겠지요. 이 때 안전하게 메일전송을 확인할 수 있는 gem으로 MailCatcher가 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;정리&quot;&gt;정리&lt;/h3&gt;

&lt;p&gt;Ruby의 개요 및 Ruby on Rails의 기본 이념부터 Rails를 사용하여 기능을 구현하거나 테스트를 작성하는 일련의 개발 프로세스를 소개했습니다. Rails는 규칙에 따라 처리를 구현하기에 매우 빠르고 안전하게 개발을 진행할 수 있는 프레임워크입니다.&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Dec 2017 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>웹 엔지니어 - 웹 엔지니어</title>
        <link>/blackruby-code/web/2017/12/20/Web.html</link>
        <guid isPermaLink="true">/blackruby-code/web/2017/12/20/Web.html</guid>
        <description>&lt;h1 id=&quot;웹-엔지니어의-교과서&quot;&gt;웹 엔지니어의 교과서&lt;/h1&gt;

&lt;h2 id=&quot;웹-엔지니어&quot;&gt;웹 엔지니어&lt;/h2&gt;

&lt;h3 id=&quot;웹-엔지니어는-어떤-일을-할까&quot;&gt;웹 엔지니어는 어떤 일을 할까?&lt;/h3&gt;

&lt;h4 id=&quot;웹-엔지니어-1&quot;&gt;웹 엔지니어&lt;/h4&gt;

&lt;p&gt;여기에서는 Ruby나 PHP로 웹 애플리케이션을 개발하는(프런트 엔드도 하지만 주로 서버사이드를 담당하는) 엔지니어를 가리켜 웹 엔지니어로 정의합니다.&lt;/p&gt;

&lt;h4 id=&quot;웹-엔지니어가-하는-일&quot;&gt;웹 엔지니어가 하는 일&lt;/h4&gt;

&lt;p&gt;웹 애플리케이션의 요구 사항 정의와 설계, 개발, 테스트 등 서비스의 공개나 개선과 관련된 일을 주로 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;트위터&lt;/li&gt;
  &lt;li&gt;요구 사항 정의&lt;/li&gt;
  &lt;li&gt;설계&lt;/li&gt;
  &lt;li&gt;개발&lt;/li&gt;
  &lt;li&gt;테스트&lt;/li&gt;
  &lt;li&gt;오류의 원인 조사&lt;/li&gt;
  &lt;li&gt;버그 수정&lt;/li&gt;
  &lt;li&gt;로그 분석&lt;/li&gt;
  &lt;li&gt;기술 조사&lt;/li&gt;
  &lt;li&gt;코드 리뷰&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;풀스택 엔지니어&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;최근 '풀 스택 엔지니어'라는 말이 화젯거리입니다. 
풀스택 엔지니어는 프런트 엔드, 서버사이드, 인프라 등 
여러 분야에서 폭넓게 잘할 수 있는 엔지니어를 의미합니다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;필요한-기술-영역&quot;&gt;필요한 기술 영역&lt;/h3&gt;

&lt;p&gt;웹 엔지니어는 보통 다음의 기술 영역을 다룹니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTML&lt;/li&gt;
  &lt;li&gt;CSS&lt;/li&gt;
  &lt;li&gt;프런트 엔드&lt;/li&gt;
  &lt;li&gt;서버사이드&lt;/li&gt;
  &lt;li&gt;데이터베이스&lt;/li&gt;
  &lt;li&gt;웹 서버&lt;/li&gt;
  &lt;li&gt;AWS&lt;/li&gt;
  &lt;li&gt;Github&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;html&quot;&gt;HTML&lt;/h4&gt;

&lt;p&gt;HTML은 웹에서 문서를 표시하는 마크업 언어입니다.&lt;/p&gt;

&lt;p&gt;HTML은 첫 버전인 HTML 1.0이 탄생한 이후 여러 번 사양이 변경되어 HTML5 버전까지 등장했습니다.&lt;/p&gt;

&lt;p&gt;HTML5에는 다음과 같은 특징이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;동영상과 음성, 그래프를 표현할 수 있다.&lt;/li&gt;
  &lt;li&gt;API를 새롭게 추가할 수 있다.&lt;/li&gt;
  &lt;li&gt;폼 관련 기능을 강화했다.&lt;/li&gt;
  &lt;li&gt;긴 선언을 생략할 수 있다.&lt;/li&gt;
  &lt;li&gt;더 명확하게 문서 구조를 나타낼 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;css&quot;&gt;CSS&lt;/h4&gt;

&lt;p&gt;CSS는 Cascading Style Sheets의 약어로, 웹 애플리케이션의 스타일을 지정하는 언어입니다. 보통 HTML로는 문서 구조를 정의하고, CSS로는 스타일을 제어하는 방식으로 구분해서 사용합니다.&lt;/p&gt;

&lt;p&gt;최근에는 SCSS라고 하는 메타 언어도 등장했습니다. SCSS를 사용하면 중첩하여 똑같은 태그를 여러 번 지정하지 않아도 되고, 몇 번씩 등장하는 값은 변수로 선언해서 선언한 곳만 값을 수정하면 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;프런트-엔드&quot;&gt;프런트 엔드&lt;/h4&gt;

&lt;p&gt;JavaScript와 jQuery를 사용한 프런트 엔드 개발입니다. 예를 들어, 특정 요소가 처음에는 숨어 있다가 어떤 버튼을 클릭하면 표시한다거나 특정 요소를 동적으로 추가하는 등 처리를 합니다.&lt;/p&gt;

&lt;h4 id=&quot;서버사이드&quot;&gt;서버사이드&lt;/h4&gt;

&lt;p&gt;Ruby, PHP, Perl, Python 등을 사용한 서버사이드 개발입니다. 이 분야는 웹 엔지니어로서 갖춰야 할 가장 기본적인 기술 영역입니다. 프런트 엔드 쪽에서 표시를 제어한다고 해도 애초에 서버사이드에서 데이터를 가져와야 합니다.&lt;/p&gt;

&lt;p&gt;사용 언어별 프레임워크를 정리하면 다음과 같습니다!&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;언어&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;프레임워크&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Ruby&lt;/td&gt;
      &lt;td&gt;Rails, Sinatra, Padrino&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PHP&lt;/td&gt;
      &lt;td&gt;CakePHP, FuelPHP, Symfony, Laravel&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Perl&lt;/td&gt;
      &lt;td&gt;Cataliyst, Mojolicious, Mojolicious::Lite&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Python&lt;/td&gt;
      &lt;td&gt;Django, Tornado, Flask, Bottle&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;데이터-베이스&quot;&gt;데이터 베이스&lt;/h4&gt;

&lt;p&gt;MySQL이나 PostgreSQL, Oracle 등 관계형 데이터베이스도 웹 애플리케이션을 개발 할 때 피해 갈 수 없습니다. 극단적으로 말하면, 데이터베이스에서 데이터를 꺼내어 표시하는 것이 웹 애플리케이션 입니다. 당연히 데이터베이스를 조작하려면 SQL을 다룰 수 있어야 합니다.&lt;/p&gt;

&lt;p&gt;또, 웹 애플리케이션은 데이터베이스에서 데이터를 얼마나 빨리 읽을 수 있는지가 중요합니다. Amazon 조사에 따르면, 웹 페이지 표시 속도가 0.1초 느려지면 매출이 1% 감소한다고 합니다. 그리고 구글은 웹 페이지 반응이 0.5초 느려지면 방문자 수가 20% 감소한다고 발표했습니다.&lt;/p&gt;

&lt;p&gt;이처럼 웹 페이지 표시 속도는 매출과 방문자 수에 큰 영향을 미치게 됩니다.&lt;/p&gt;

&lt;h4 id=&quot;웹-서버&quot;&gt;웹 서버&lt;/h4&gt;

&lt;p&gt;웹 애플리케이션을 공개하려면 아파치(Apache)나 엔진엑스(Nginx)등 웹 서버를 다루는 일도 피해갈 수 없습니다. 요즘에는 Nginx를 자주 사용합니다.&lt;/p&gt;

&lt;h4 id=&quot;aws&quot;&gt;AWS&lt;/h4&gt;

&lt;p&gt;최근 클라우드 서비스, 그중에서도 특히 AWS(Amazon Web Service)를 사용하여 웹 서버나 데이터베이스를 구축하는 사례가 늘었습니다. AWS에서는 Amazon EC2, Amazon S3 등 아주 많은 서비스를 제공 합니다.&lt;/p&gt;

&lt;h4 id=&quot;github&quot;&gt;Github&lt;/h4&gt;

&lt;p&gt;코드 호스팅 서비스로 GitHub를 이용하는 사례가 늘었습니다. 이미 많이들 GitHub에서 프로젝트를 알리거나 코드 리뷰를 하고 있지요?&lt;/p&gt;

&lt;h3 id=&quot;계속-새롭게-등장하는-기술&quot;&gt;계속 새롭게 등장하는 기술&lt;/h3&gt;

&lt;p&gt;새로운 기술의 등장을 즐길 수 있으냐는 앞으로 웹 엔지니어로 살아가는 데 중요한 자질이 될 것입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NoSQL 데이터베이스&lt;/li&gt;
  &lt;li&gt;JavaScript 프레임워크&lt;/li&gt;
  &lt;li&gt;Fluentd&lt;/li&gt;
  &lt;li&gt;그래프로 시각화&lt;/li&gt;
  &lt;li&gt;가상화 기술&lt;/li&gt;
  &lt;li&gt;프로비저닝 도구&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;nosql-데이터베이스&quot;&gt;NoSQL 데이터베이스&lt;/h4&gt;

&lt;p&gt;NoSQL 데이터베이스에는 맴캐시드와 Redis, MongoDB 등이 있습니다. 관계형 데이터베이스가 취약한 부분에서 강점을 보일 때가 많으므로 적재적소에 활용하면 좋습니다.&lt;/p&gt;

&lt;h4 id=&quot;javascript-프레임워크&quot;&gt;JavaScript 프레임워크&lt;/h4&gt;

&lt;p&gt;프런트 엔드 구현에서는 jQuery를 사용한 DOM 조작을 생각할 수 있습니다. jQuery가 등장한 덕분에 JavaScript를 사용하는 번거로운 DOM 조작을 아주 간편하게 기술할 수 있습니다. 하지만 최근에는 프런트 엔드를 대규모로 개발하여 jQuery만으로는 대규모 JavaScript 프로그램을 관리하기가 어렵습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MVC는 대표적인 좋은 설계 방식입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MVC는 Model(비즈니스 로직을 담당하는 부분), View(표시를 담당하는 부분), Controller(입력을 받아 Model과 View를 연결하는 부분)의 약어로, 크게 세 부분으로 나눠 프로그램을 기술하는 설계 방식입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MVC 아키텍쳐&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Router-MVC-DB.svg/512px-Router-MVC-DB.svg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;fluentd&quot;&gt;Fluentd&lt;/h4&gt;

&lt;p&gt;여러 대의 서버에 로그를 조금씩 저장한 상태에서는 막상 보고 싶을 때 모든 로그를 간단히 확인할 수 없다는 문제가 발생합니다. 이 문제는 로그 수집 도구인 Fluentd로 해결할 수 있습니다. Fluentd를 사용하면 여러 대의 서버에 흩어져 있는 로그를 거의 실시간으로 특정 서버로 모을 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;그래프로-시각화&quot;&gt;그래프로 시각화&lt;/h4&gt;

&lt;p&gt;로그를 분석해서 KPI 등 다양한 항목을 측정하고, 관리 화면 등에 그 값을 표시할 때가 많습니다. 이때 측정한 데이터를 그래프로 시각화하는 기술이 필요합니다. 데이터를 시각화하면 숫자에 강한 일부 전문가뿐만 아니라 팀 전체에서 쉽게 공유할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;가상화-기술&quot;&gt;가상화 기술&lt;/h4&gt;

&lt;p&gt;가상화는 Vagrant나 Docker 등이 등장하면서 매우 활성화된 분야입니다. Vagrant나 Docker를 사용하면 환경 구축을 자동화할 수 있습니다.&lt;/p&gt;

&lt;h4 id=&quot;프로비저닝-도구&quot;&gt;프로비저닝 도구&lt;/h4&gt;

&lt;p&gt;프로비저닝(필요한 라이브러리와 미들웨어를 설치하고 원하는 서버 상태로 만드는 것)에는 Chef와 Ansible과 같은 도구를 사용하면 편리합니다. 여러 대의 서버를 한꺼번에 처리할 수 있으므로 어떤 서버에는 설치하고 어떤 서버에는 설치하지 않거나, 특정 서버와 다른 서버의 버전이 달라지는 등 서버 간 불일치를 막을 수 있습니다.&lt;/p&gt;

</description>
        <pubDate>Wed, 20 Dec 2017 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>문제풀이 - 코딩도장</title>
        <link>/blackruby-code/code/2017/12/20/Code.html</link>
        <guid isPermaLink="true">/blackruby-code/code/2017/12/20/Code.html</guid>
        <description>&lt;p&gt;1차원의 점들이 주어졌을 때, 그 중 가장 거리가 짧은 것의 쌍을 출력하는 함수를 작성하시오. (단 점들의 배열은 모두 정렬되어있다고 가정한다.)&lt;/p&gt;

&lt;p&gt;예를들어 S={1, 3, 4, 8, 13, 17, 20} 이 주어졌다면, 결과값은 (3, 4)가 될 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;s = [1,23,11,24,32]

distance = 10000
result = [0, 0]

for i in range(len(s)):
   if i == 0:
      continue
   else:
      tmp_distance = abs(s[i] - s[i - 1])
      if tmp_distance &amp;lt; distance:
         distance = tmp_distance
         result[0] = i - 1
         result[1] = i

print(s[result[0]], s[result[1]])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 20 Dec 2017 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>블록체인기술의 개념(O'reilly-blockchain)</title>
        <link>/blackruby-code/blockchain/2017/12/19/Blockchain.html</link>
        <guid isPermaLink="true">/blackruby-code/blockchain/2017/12/19/Blockchain.html</guid>
        <description>&lt;p&gt;&lt;strong&gt;[원문]&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;we-may-be-at-the-dawn-of-a-new-revolution&quot;&gt;We may be at the dawn of a new revolution.&lt;/h1&gt;

&lt;p&gt;This revolution started with a new fringe economy on the Internet, 
an alternative currency called Bitcoin that was issued and backed not by a central authority, 
but by automated consensus among networked users. 
Its true uniqueness, however, lay in the fact that it did not require the users to trust each other. 
Through algorithmic self-policing, any malicious attempt to defraud the system would be rejected. 
In a precise and technical definition, Bitcoin is digital cash that is transacted via the Internet in a decentralized trustless system using a public ledger called the blockchain. 
It is a new form of money that combines BitTorrent peer-to-peer file sharing1 with public key cryptography.
2 Since its launch in 2009, Bitcoin has spawned a group of imitators—alternative currencies using the same general approach but with different optimizations and tweaks. 
More important, blockchain technology could become the seamless embedded economic layer the Web has never had, 
serving as the technological underlay for payments, decentralized exchange, token earning and spending, digital asset invocation and transfer, 
and smart contract issuance and execution. Bitcoin and blockchain technology, as a mode of decentralization, could be the next major disruptive technology 
and worldwide computing paradigm (following the mainframe, PC, Internet, and social networking/mobile phones), with the potential for reconfiguring all human activity as pervasively as did the Web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[번역]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;우리는 새로운 혁명의 새벽에 있을지도 모릅니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 혁명은 중앙 권위가 아니라 네트워크 사용자 간의 자동 합의에 의해 발행되고지지 된 Bitcoin이라는 대체 통화 인 인터넷에서 새로운 프린지 경제로 시작되었습니다. 
그러나 진정한 독창성은 사용자가 서로 신뢰하지 않아도된다는 사실에있었습니다. 
알고리즘 자체 폴링을 통해 악의적 인 시스템 사기 시도가 거부됩니다. 정확하고 기술적 인 정의에서, 
Bitcoin은 블록 체인이라는 공공 장부를 사용하여 분산 된 트러스트리스 시스템에서 인터넷을 통해 거래되는 디지털 현금입니다. 
BitTorrent 피어 투 피어 파일 공유 1과 공개 키 암호화 2를 결합한 새로운 형태의 돈입니다.
2 Bitcoin은 2009 년 출시 이후 동일한 일반적인 접근법을 사용하지만 최적화와 조정이 다른 모방 자 그룹을 탄생 시켰습니다. 
더 중요한 것은 블록 체인 기술은 지불, 분산 형 교환, 토큰 획득 및 지출, 디지털 자산 호출 및 전송, 스마트 계약 체결 및 실행을위한 기술적 인 기반 역할을하는 웹이 없었던 매끄러운 임베디드 경제 계층이 될 수 있습니다. 
분권화 모드 인 Bitcoin 및 블록 체인 기술은 다음과 같은 주요 파괴적인 기술 및 전 세계 컴퓨팅 패러다임 (메인 프레임, PC, 인터넷 및 소셜 네트워킹 / 휴대폰에 이어)으로서 모든 인간 활동을 다음과 같이 광범위하게 재구성 할 수 있습니다.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[원문]&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;what-is-bitcoin&quot;&gt;What Is Bitcoin?&lt;/h1&gt;

&lt;p&gt;Bitcoin is digital cash.&lt;/p&gt;

&lt;p&gt;It is a digital currency and online payment system in which encryption techniques are used to regulate the generation of units of currency and verify the transfer of funds, operating independently of a central bank. 
The terminology can be confusing because the words Bitcoin and blockchain may be used to refer to any three parts of the concept: 
the underlying blockchain technology, the protocol and client through which transactions are effected, and the actual cryptocurrency (money); 
or also more broadly to refer to the whole concept of cryptocurrencies. 
It is as if PayPal had called the Internet “PayPal,” upon which the PayPal protocol was run, to transfer the PayPal currency. 
The blockchain industry is using these terms interchangeably sometimes because it is still in the process of shaping itself into what could likely become established layers in a technology stack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[번역]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bitcoin은 무엇인가?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bitcoin은 디지털 현금입니다.&lt;/p&gt;

&lt;p&gt;이것은 디지털 통화 및 온라인 지불 시스템으로 암호화 기술을 사용하여 통화 단위 생성을 규제하고 중앙 은행과 독립적으로 운영되는 자금의 이체를 확인합니다. 
Bitcoin과 blockchain이라는 단어가 개념의 세 부분, 즉 기본 블록 체인 기술, 트랜잭션이 수행되는 프로토콜과 클라이언트, 실제 암호 화 (돈)를 언급하기 위해 사용되기 때문에 전문 용어가 혼란 스러울 수 있습니다. 
cryptocurrencies의 전체 개념을 언급하는 데 더 광범위하게 사용됩니다. 
마치 PayPal이 PayPal 통화를 전송하기 위해 PayPal 프로토콜이 실행 된 인터넷 “PayPal”을 호출 한 것과 같습니다. 
블록 체인 업계는 때때로 기술 스택에서 확립 된 레이어가 될 수 있는 요소를 형성하는 과정에 있기 때문에 이러한 용어를 서로 바꾸어 사용합니다.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[원문]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bitcoin was created in 2009 (released on January 9, 20096) by an unknown person or entity using the name Satoshi Nakamoto. 
The concept and operational details are described in a concise and readable white paper, 
“Bitcoin: A Peer-to-Peer Electronic Cash System.”7 Payments using the decentralized virtual currency are recorded in a public ledger that is stored on many—potentially all—Bitcoin users’ computers, and continuously viewable on the Internet. 
Bitcoin is the first and largest decentralized cryptocurrency. 
There are hundreds of other “altcoin” (alternative coin) cryptocurrencies, like Litecoin and Dogecoin, but Bitcoin comprises 90 percent of the market capitalization of all cryptocurrencies and is the de facto standard. 
Bitcoin is pseudonymous (not anonymous) in the sense that public key addresses (27–32 alphanumeric character strings; similar in function to an email address) are used to send and receive Bitcoins and record transactions, as opposed to personally identifying information.&lt;/p&gt;

&lt;p&gt;Bitcoins are created as a reward for computational processing work, known as mining, 
in which users offer their computing power to verify and record payments into the public ledger. 
Individuals or companies engage in mining in exchange for transaction fees and newly created Bitcoins. 
Besides mining, Bitcoins can, like any currency, be obtained in exchange for fiat money, products, and services. 
Users can send and receive Bitcoins electronically for an optional transaction fee using wallet software on a personal computer, mobile device, or web application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[번역]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Bitcoin은 2009 년 1 월 9 일에 발표 된 나카 모토 사토시 (Satoshi Nakamoto)라는 이름을 사용하여 알려지지 않은 사람이나 단체에 의해 작성되었습니다. 
개념 및 운영 세부 사항은 간결하고 읽기 쉬운 백서 “Bitcoin : 피어 - 투 - 피어 전자 현금 시스템”에 설명되어 있습니다. 
7 분산 가상 화폐를 사용하는 지급은 잠재적으로 모두에 저장된 공공 장부에 기록됩니다 -Bitcoin 사용자의 컴퓨터 및 인터넷에서 지속적으로 볼 수 있습니다. 
비트 코인 (Bitcoin)은 최초이자 가장 큰 분산 형 크립토 커 런시 (cryptocurrency)입니다. 
Litecoin과 Dogecoin 같은 다른 “altcoin”(대체 동전) cryptocurrencies가 있지만 Bitcoin은 모든 cryptocurrencies의 시가 총액의 90 %를 차지하며 사실상의 표준입니다. 
Bitcoin은 개인 식별 정보가 아니라 공개 키 주소 (전자 메일 주소와 기능면에서 27-32 자의 영숫자 문자열)가 Bitcoins을 보내고 수신하는 데 사용된다는 의미에서 익명입니다 (익명은 아닙니다).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bitcoins은 광업으로 알려진 전산 처리 작업에 대한 보상으로 만들어지며, 사용자가 계산을 통해 공공 장부에 지불을 확인하고 기록합니다. 
개인이나 회사는 거래 수수료 및 새로 생성 된 Bitcoins과 교환하여 광업에 종사합니다. 
광업 외에도 Bitcoins는 통화와 마찬가지로 현금, 제품 및 서비스와 교환 할 수 있습니다. 사용자는 개인용 컴퓨터, 모바일 장치 또는 웹 응용 프로그램에서 Wallet 소프트웨어를 사용하여 선택적 거래 수수료로 Bitcoins을 전자적으로 보내고받을 수 있습니다.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[원문]&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;what-is-the-blockchain&quot;&gt;What Is the Blockchain?&lt;/h1&gt;

&lt;p&gt;The blockchain is the public ledger of all Bitcoin transactions that have ever been executed. 
It is constantly growing as miners add new blocks to it (every 10 minutes) to record the most recent transactions. 
The blocks are added to the blockchain in a linear, chronological order. 
Each full node (i.e., every computer connected to the Bitcoin network using a client that performs the task of validating and relaying transactions) has a copy of the blockchain, which is downloaded automatically when the miner joins the Bitcoin network. 
The blockchain has complete information about addresses and balances from the genesis block (the very first transactions ever executed) to the most recently completed block. 
The blockchain as a public ledger means that it is easy to query any block explorer (such as https://blockchain.info/) for transactions associated with a particular Bitcoin address—for example, you can look up your own wallet address to see the transaction in which you received your first Bitcoin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[번역]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;블록 체인은 지금까지 실행 된 모든 Bitcoin 트랜잭션의 공용 원장입니다. 
광부들이 가장 최근의 거래를 기록하기 위해 매 10 분마다 새로운 블록을 추가함에 따라 지속적으로 증가하고 있습니다. 
블록은 선형, 연대순으로 블록 체인에 추가됩니다. 
모든 전체 노드 (즉, 거래의 유효성을 확인하고 릴레이하는 작업을 수행하는 클라이언트를 사용하여 Bitcoin 네트워크에 연결된 모든 컴퓨터)에는 광부가 Bitcoin 네트워크에 가입 할 때 자동으로 다운로드되는 블록 체인 복사본이 있습니다. 
Blockchain은 창세기 블록 (실행 된 첫 번째 트랜잭션)에서 가장 최근에 완료된 블록까지의 주소 및 잔액에 대한 완전한 정보를 가지고 있습니다. 
공용 장부로서의 블록 체인은 특정 Bitcoin 주소와 관련된 트랜잭션에 대해 블록 탐색기 (예 : https://blockchain.info/)를 쿼리하는 것이 쉽다는 것을 의미합니다. 
예를 들어 자신의 지갑 주소를 조회하여 첫 번째 Bitcoin을받은 거래.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[원문]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The blockchain is seen as the main technological innovation of Bitcoin because it stands as a “trustless” proof mechanism of all the transactions on the network. 
Users can trust the system of the public ledger stored worldwide on many different decentralized nodes maintained by “miner-accountants,” as opposed to having to establish and maintain trust with the transaction counterparty (another person) or a third-party intermediary (like a bank). 
The blockchain as the architecture for a new system of decentralized trustless transactions is the key innovation. 
The blockchain allows the disintermediation and decentralization of all transactions of any type between all parties on a global basis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[번역]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Blockchain은 Bitcoin의 주요 기술 혁신으로 간주됩니다. 
BitCin은 네트워크상의 모든 트랜잭션을 “신뢰할 수없는”증명 메커니즘으로 간주하기 때문입니다. 
사용자는 거래 상대방 (타인) 또는 제 3 자 중개자 (예 : 거래 상대방)와의 신뢰를 쌓고 유지해야하는 것과 달리 “광부 - 회계사”가 관리하는 여러 분산 된 노드에 전 세계에 저장된 공공 장부 시스템을 신뢰할 수 있습니다. 
은행). 분산 된 트러스트없는 트랜잭션의 새로운 시스템을위한 아키텍처 인 블록 체인은 핵심 혁신입니다. 
블록 체인은 모든 유형의 모든 거래를 글로벌 차원에서 모든 당사자간에 분산 및 분권화 할 수 있습니다.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[원문]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The blockchain is like another application layer to run on the existing stack of Internet protocols, 
adding an entire new tier to the Internet to enable economic transactions, both immediate digital currency payments (in a universally usable cryptocurrency) and longer-term, more complicated financial contracts. 
Any currency, financial contract, or hard or soft asset may be transacted with a system like a blockchain. 
Further, the blockchain may be used not just for transactions, but also as a registry and inventory system for the recording, tracking, monitoring, and transacting of all assets. 
A blockchain is quite literally like a giant spreadsheet for registering all assets, and an accounting system for transacting them on a global scale that can include all forms of assets held by all parties worldwide. 
Thus, the blockchain can be used for any form of asset registry, inventory, and exchange, including every area of finance, economics, and money; hard assets (physical property); and intangible assets (votes, ideas, reputation, intention, health data, etc.).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[번역]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;블록 체인은 기존의 인터넷 프로토콜 스택에서 실행되는 또 다른 응용 프로그램 계층과 같으며 인터넷에 전체 계층을 추가하여 경제 거래 (즉각적인 디지털 통화 지불 (보편적으로 사용 가능한 cryptocurrency에서)와 장기적이고 복잡한 재무 관리 계약. 
모든 통화, 금융 계약 또는 하드 또는 소프트 자산은 블록 체인과 같은 시스템으로 거래 될 수 있습니다. 
또한 블록 체인은 트랜잭션뿐만 아니라 모든 자산의 기록, 추적, 모니터링 및 트랜잭션을위한 레지스트리 및 재고 시스템으로도 사용될 수 있습니다. 
블록 체인은 말 그대로 모든 자산을 등록하는 거대한 스프레드 시트와 같으며 전 세계 모든 당사자가 보유한 모든 형태의 자산을 포함 할 수있는 글로벌 규모로 거래하는 회계 시스템입니다. 
따라서 블록 체인은 금융, 경제 및 자금의 모든 영역을 포함하여 자산 등록, 재고 및 교환의 형태로 사용될 수 있습니다. 
딱딱한 자산 (물적 재산); 무형 자산 (투표, 아이디어, 평판, 의도, 건강 데이터 등).
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[원문]&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;the-connected-world-and-blockchain-the-fifth-disruptive-computing-paradigm&quot;&gt;The Connected World and Blockchain: The Fifth Disruptive Computing Paradigm&lt;/h1&gt;

&lt;p&gt;One model of understanding the modern world is through computing paradigms, 
with a new paradigm arising on the order of one per decade (Figure P-1). 
First, there were the mainframe and PC (personal computer) paradigms, and then the Internet revolutionized everything. 
Mobile and social networking was the most recent paradigm. 
The current emerging paradigm for this decade could be the connected world of computing relying on blockchain cryptography. 
The connected world could usefully include blockchain technology as the economic overlay to what is increasingly becoming a seamlessly connected world of multidevice computing that includes wearable computing, Internet-of-Things (IoT) sensors, smartphones, tablets, laptops, quantified self-tracking devices (i.e., Fitbit), smart home, smart car, and smart city. 
The economy that the blockchain enables is not merely the movement of money, however; it is the transfer of information and the effective allocation of resources that money has enabled in the human- and corporate-scale economy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[번역]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;현대 세계를 이해하는 한 가지 모델은 컴퓨팅 패러다임을 통해 이루어지며 새로운 패러다임은 10 년에 한 번씩 발생합니다 (그림 P-1). 
첫째, 메인 프레임과 PC (개인용 컴퓨터) 패러다임이 있었고 인터넷은 모든 것을 혁명적으로 변화 시켰습니다. 
모바일 및 소셜 네트워킹이 가장 최근의 패러다임이었습니다. 이 10 년 동안 현재 떠오르는 패러다임은 블록 체인 (blockchain) 암호화에 의존하는 컴퓨팅의 연결 된 세계 일 수 있습니다. 
연결된 세계는 웨어러블 컴퓨팅, IoT (Internet-of-Things) 센서, 스마트 폰, 태블릿, 랩톱, 수량화 된 자체 추적 장치를 포함하는 멀티 장치 컴퓨팅의 끊임없이 연결된 세상이되고있는 것에 대한 경제적 인 오버레이로서 블록 체인 기술을 유용하게 포함 할 수 있습니다 
(즉, Fitbit), 스마트 홈, 스마트 카, 똑똑한 도시. 블록 체인이 가능하게하는 경제는 단순한 돈의 이동이 아닙니다. 
이는 정보의 이전과 인간 및 기업 규모의 경제에서 돈이 가능하게 한 자원의 효과적인 배분입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[원문]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With revolutionary potential equal to that of the Internet, blockchain technology could be deployed and adopted much more quickly than the Internet was, given the network effects of current widespread global Internet and cellular connectivity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[번역]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;인터넷과 동등한 혁명적 인 잠재력을 지닌 블록 체인 기술은 현재 널리 보급 된 전세계 인터넷 및 셀룰러 연결의 네트워크 효과를 고려할 때 인터넷보다 훨씬 빠르게 배치되고 채택 될 수 있습니다.
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[원문]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just as the social-mobile functionality of Paradigm 4 has become an expected feature of technology properties, with mobile apps for everything and sociality as a website property (liking, commenting, friending, forum participation), so too could the blockchain of Paradigm 5 bring the pervasive expectation of value exchange functionality. 
Paradigm 5 functionality could be the experience of a continuously connected, seamless, physical-world, multidevice computing layer, with a blockchain technology overlay for payments—not just basic payments, but micropayments, decentralized exchange, token earning and spending, digital asset invocation and transfer, and smart contract issuance and execution—as the economic layer the Web never had. 
The world is already being prepared for more pervasive Internet-based money: Apple Pay (Apple’s token-based ewallet mobile app) and its competitors could be a critical intermediary step in moving to a full-fledged cryptocurrency world in which the blockchain becomes the seamless economic layer of the Web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[번역]&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Paradigm 4의 소셜 - 모바일 기능이 기술 속성의 기대되는 기능이되고, 모든 것을위한 모바일 앱과 웹 사이트 속성 (좋아하는 것, 댓글 달기, friending, 포럼 참여)으로 된 것처럼, 
Paradigm 5의 블록 체인은 가치 교환 기능에 대한 전반적인 기대. 
Paradigm 5 기능은 지불에 대한 블록 체인 기술 오버레이 (기본 지불뿐 아니라 소액 결제, 분산 된 교환, 토큰 적립 및 지출, 디지털 자산 호출 및 기타 기능)을 통해 끊임없이 연결되고 끊김없는 물리적 세계 멀티 컴퓨터 컴퓨팅 계층의 경험 일 수 있습니다. 
이전, 스마트 계약 체결 및 실행 - 웹에서 결코 볼 수 없었던 경제적 계층. Apple Pay (Apple의 토큰 기반 ewallet 모바일 앱) 및 그 경쟁자는 블록 체인이 완벽 해지는 본격적인 cryptocurrency 세계로 이동하는 중요한 중개 단계가 될 수 있습니다 경제 계층.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://yoonkh.github.io/assets/blockchain.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Dec 2017 00:00:00 +0900</pubDate>
      </item>
    
      <item>
        <title>파이썬을 여행하는 히치하이커를 위한 안내서 - 데이터 지속성</title>
        <link>/blackruby-code/back/2017/12/17/Python_travel7.html</link>
        <guid isPermaLink="true">/blackruby-code/back/2017/12/17/Python_travel7.html</guid>
        <description>&lt;h2 id=&quot;데이터-지속성&quot;&gt;데이터 지속성&lt;/h2&gt;

&lt;h3 id=&quot;구조화된-파일&quot;&gt;구조화된 파일&lt;/h3&gt;

&lt;h3 id=&quot;데이터베이스-라이브러리&quot;&gt;데이터베이스 라이브러리&lt;/h3&gt;

&lt;p&gt;파이썬 데이터베이스 API는 파이선에서 데이터베이스에 접근하는 표준 인터페이스를 정의한다. PEP 249에 문서화되어 있으며, 보다 자세한 내용은 파이썬 DB-API에 대한 소개 자료에 나와 있다.&lt;/p&gt;

&lt;h4 id=&quot;sqlite3&quot;&gt;sqlite3&lt;/h4&gt;

&lt;p&gt;SQLite는 sqlite3 뒤에서 데이터베이스를 제공하는 C 라이브러리이다. 단일 파일로 데이터베이스를 저장하며 컨벤션에 따라 *.db의 확장자를 가진다.&lt;/p&gt;

&lt;h4 id=&quot;sqlalchemy&quot;&gt;SQLAlchemy&lt;/h4&gt;

&lt;p&gt;SQLAlchemy는 매우 인기 있는 데이터베이스 툴킷이다. Django는 자체 ORM에서 SQLAlchemy로 전환하는 옵션을 제공하며, 블로그 제작을 위한 Flask 메가 튜토리얼에서는 SQLAlchemy를 백엔드로 사용한다.&lt;/p&gt;

&lt;h4 id=&quot;djagno-orm&quot;&gt;Djagno ORM&lt;/h4&gt;

&lt;p&gt;Django ORM은 데이터베이스 접근을 위해 Django에서 사용하는 인터페이스이다. Django ORM의 액티브 레코드 패턴의 구현이 아마도 여기 소개되는 라이브러리 중 루비 온레일스의 ActiveRecord 라이브러리와 가장 흡사할 것이다.&lt;/p&gt;

&lt;h4 id=&quot;peewee&quot;&gt;peewee&lt;/h4&gt;

&lt;p&gt;peewee는 SQL 문법을 알고 있는 상황에서 데이터베이스와 가볍게 상호작용하고 싶을 때 사용하면 좋다. 보는 그대로가 결과 그대로(What you see is what you get)즉 SQLAlchemy와 같이 테이블 구조를 추상화하는 최상위 레이어를 수동으로 작성할 필요가 없으며, Django ORM과 같이 라이브러리가 마법처럼 테이블 아래에 바탕 레이어를 만드는 일도 없다.&lt;/p&gt;

&lt;h4 id=&quot;ponyorm&quot;&gt;PonyORM&lt;/h4&gt;

&lt;p&gt;PonyORM은 쿼리 문법에 대해 다른 접근 방식을 취한다. SQL과 매우 유사한 언어나 불린 표현을 작성하는 대신, 파이썬의 제너레이터 구문을 사용한다. 맞춤형 PonyORM 엔티티를 생성할 수 있도록 돕는 그래픽 스키마 편집기도 있다.&lt;/p&gt;

&lt;h4 id=&quot;sqlobject&quot;&gt;SQLObject&lt;/h4&gt;

&lt;p&gt;2002년 10월에 공개된 SQLObject는 소개되는 ORM중 가장 오래되었다. 액티브 레코드 패턴을 구현하였으며, 구현했을 뿐아니라, SQLObject에는 SQL 로직을 파이썬에 추상화하는 방법으로 표준 연산자(==, &amp;lt;, &amp;lt;== 등)를 오버로드하는 새로운 아이디어도 적용되었다. 이 아이디어는 거의 모든 ORM 라이브러리에 구현되어 있으며, 매우 인기 있다.&lt;/p&gt;

&lt;h4 id=&quot;records&quot;&gt;Records&lt;/h4&gt;

&lt;p&gt;Records는 다양한 데이터베이스에 원시(raw) SQL 쿼리를 보낼 수 있도록 설계된 최소한의 SQL 라이브러리이다. Tublib과 SQLAlchemy와 함께 설치되며, 근사한 API와 명령줄 도구가 제공되어 SQL 클라이언트와 같이 행동하며, YAML, XLS, 기타 Tablib 형식으로 결과를 출력할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;nosql-데이터베이스-라이브러리&quot;&gt;NoSQL 데이터베이스 라이브러리&lt;/h4&gt;

&lt;p&gt;전통적인 관계형 데이터베이스가 아닌 데이터베이스, 즉 NoSQL데이터베이스를 사용하는 사람들도 있다. PyPI를 둘러보면, 비슷한 이름을 가진 파이썬 패키지가 수없이 많아 혼란스러울 수 있다. 원하는 데이터베이스 제품과 함께 사용하기 좋은 파이썬 라이브러리가 무엇인지 살펴보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MongoDB&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;몽고DB(MongoDB)는 분산 문서 저장소이다. 고유의 필터와 쿼리 언어가 있는, 클러스터에 서식하는 거대한 파이썬 딕셔너리를 상상하면 된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;카산드라&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;카산드라는 분산 테이블 저장소이다. 빠른 검색을 제공하며 열의 개수가 많아져도 무리가 없다. 조인 기능을 제공하지 않는 대신 여러 테이블의 서로 다른 열을 하나의 테이블로 묶는 기능을 제공한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HBase&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;HBase는 분산 열 저장소이다. 이경우 열 저장소는 데이터가 (행 ID, 열 이름, 값)과 같이 저장되므로 웹을 구성하는 웹사이트간 네트워크 데이터와 같은 희소 배열 (sparse array) 형태의 데이터에 적합하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;드루이드&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;드루이드는 분산 열저장소로서, 이벤트 데이터를 수집하는 데 사용할 수 있다. 드루이드는 열에 순서를 매기고 정렬할 수 있으며, 빠른 I/O를 가능하게 하고 작은 풋프린트를 가지도록 스토리지(storage)를 압축할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;레디스&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;레디스는 분산 인메모리 키-값 저장소이다. 디스크 I/O가 없어 대기 시간이 줄어드는 게 핵심이다. 예를 들어 더 빠른 웹 조회를 위해 빈번한 쿼리 결과를 저장할 수도 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;카우치베이스&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Couchbase는 보다 SQL스러운 API를 가지는 또 다른 분산 문서 저장소이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Neo4j&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Neo4j는 그래프 형태의 관계로 객체를 저장하기 위한 그래프 데이터베이스이다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;LMDB&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;LMDB는 메모리에 매핑된 파일을 포함하는 키-값 저장소 데이터베이스이다. 즉, 파일이 처음부터 읽혀서 데이터가 있는 부분에 도달할 필요가 없으므로 인메모리 저장소와 거의 같은 성능이 나온다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 17 Dec 2017 00:00:00 +0900</pubDate>
      </item>
    
  </channel>
</rss>
